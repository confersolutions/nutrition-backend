{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nThis is a comprehensive B2C nutrition app backend built with Node.js, TypeScript, Express, and PostgreSQL. The application serves as an authenticated recipe platform for the US market, featuring advanced search capabilities, personalized feeds, user-generated content, and comprehensive admin tools. The system is designed as a production-ready implementation with full-text search, user authentication via Appwrite JWT, and sophisticated content moderation workflows.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Backend Architecture\nThe application uses a monolithic architecture with Express.js as the web framework and TypeScript for type safety. The codebase is structured with clear separation of concerns:\n\n- **Route handlers** in `server/routes/` organize API endpoints by domain (recipes, feed, user, admin)\n- **Services layer** in `server/services/` contains business logic for search, user content, admin operations, and feed generation\n- **Middleware stack** provides authentication, rate limiting, error handling, audit logging, and idempotency\n- **Database layer** uses Drizzle ORM with raw SQL execution capabilities for complex operations\n\n## Authentication & Authorization\nThe system implements JWT-based authentication using Appwrite:\n\n- **JWT verification middleware** validates tokens on each request\n- **Admin impersonation** allows administrators to view the system as any user (GET requests only, with full audit trails)\n- **Role-based access control** with admin privileges determined by user profile or team membership\n- **Row Level Security (RLS)** enforces user-scoped data access at the database level\n\n## Database Design\nPostgreSQL 15+ with advanced features:\n\n- **Drizzle ORM** for type-safe database operations with support for raw SQL when needed\n- **Full-Text Search** using native PostgreSQL features (tsvector, tsquery, ts_rank_cd)\n- **GIN indexes** for array fields and full-text search optimization\n- **Materialized views** for performance optimization of complex queries\n- **Trigger-maintained search fields** for automatic search index updates\n\n## Search & Feed System\nSophisticated search and recommendation engine:\n\n- **Multi-dimensional search** supporting text, dietary restrictions, nutritional filters, and cuisine preferences\n- **Personalized feed generation** using user preferences and behavior patterns\n- **Full-text search scoring** with PostgreSQL's ranking algorithms\n- **Real-time search analytics** for admin monitoring\n\n## Content Management\nComprehensive content workflow system:\n\n- **User-generated content** with moderation queue and approval workflows\n- **Curated recipe management** with admin creation and editing capabilities\n- **Content sharing** with unique share slugs and visibility controls\n- **Recipe history tracking** and user behavior analytics\n\n## Middleware Stack\nProduction-ready middleware pipeline:\n\n- **Rate limiting** with separate limits for read/write operations\n- **Idempotency protection** for state-changing operations\n- **Comprehensive audit logging** for all admin actions and user impersonation\n- **Structured error handling** with RFC 7807 Problem Details format\n- **Request/response logging** with performance metrics\n\n## Admin System\nFull-featured administrative interface:\n\n- **Real-time dashboard** with system metrics and health monitoring\n- **Content moderation queue** for user-submitted recipes\n- **Audit log viewer** with comprehensive action tracking\n- **Database management tools** including materialized view refresh\n- **User impersonation** with full audit trails\n\n## Frontend Architecture\nReact-based admin interface with modern tooling:\n\n- **TypeScript React** with functional components and hooks\n- **TanStack Query** for server state management and caching\n- **Shadcn/ui** component library built on Radix primitives\n- **Tailwind CSS** for styling with custom design system\n- **Wouter** for lightweight client-side routing\n\n# External Dependencies\n\n## Database & ORM\n- **PostgreSQL 15+** - Primary database with advanced features (full-text search, materialized views, RLS)\n- **Drizzle ORM** - Type-safe database toolkit with PostgreSQL dialect\n- **Neon Database** - Serverless PostgreSQL hosting (@neondatabase/serverless)\n\n## Authentication\n- **Appwrite** - Backend-as-a-service providing JWT authentication and user management\n- **Teams API integration** for admin role management\n\n## Frontend Libraries\n- **React 18** with TypeScript for the admin interface\n- **TanStack React Query** for server state management\n- **Radix UI primitives** via Shadcn/ui for accessible components\n- **Tailwind CSS** for utility-first styling\n- **Wouter** for lightweight routing\n- **React Hook Form** with Zod validation\n\n## Development & Tooling\n- **Vite** for frontend build tooling and development server\n- **TypeScript** for type safety across the entire stack\n- **ESBuild** for backend bundling in production\n- **Drizzle Kit** for database migrations and schema management\n- **Replit integration** for development environment\n\n## Production Dependencies\n- **Express.js** as the web framework with comprehensive middleware\n- **Postgres.js** as the PostgreSQL client\n- **Date-fns** for date manipulation\n- **Nanoid** for generating unique identifiers\n- **Zod** for runtime type validation and schema parsing","size_bytes":5373},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport { env } from \"./config/env\";\n\nconst app = express();\n\n// Trust proxy for rate limiting and IP detection\napp.set('trust proxy', 1);\n\napp.use(express.json({ limit: '10mb' }));\napp.use(express.urlencoded({ extended: false, limit: '10mb' }));\n\n// Request logging middleware\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n// CORS headers for development\nif (env.NODE_ENV === 'development') {\n  app.use((req, res, next) => {\n    res.header('Access-Control-Allow-Origin', '*');\n    res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS, PATCH');\n    res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept, Authorization, X-Appwrite-JWT, X-Act-As-User, Idempotency-Key');\n    \n    if (req.method === 'OPTIONS') {\n      res.sendStatus(200);\n    } else {\n      next();\n    }\n  });\n}\n\n(async () => {\n  try {\n    log(\"🚀 Starting Nutrition App Backend\");\n    log(`Environment: ${env.NODE_ENV}`);\n    log(`Database URL configured: ${!!env.DATABASE_URL}`);\n    log(`Appwrite configured: ${!!env.APPWRITE_ENDPOINT && !!env.APPWRITE_PROJECT_ID}`);\n    \n    const server = await registerRoutes(app);\n\n    // Setup Vite in development\n    if (env.NODE_ENV === \"development\") {\n      await setupVite(app, server);\n    } else {\n      serveStatic(app);\n    }\n    \n    // Add 404 handler after Vite middleware so frontend routing works\n    const { notFoundHandler } = await import(\"./middleware/errorHandler\");\n    app.use(notFoundHandler);\n\n    const port = env.PORT;\n    server.listen({\n      port,\n      host: \"0.0.0.0\",\n      reusePort: true,\n    }, () => {\n      log(`🌟 Server running on port ${port}`);\n      log(`📊 Admin Dashboard: http://localhost:${port}/admin`);\n      log(`🔍 API Health: http://localhost:${port}/healthz`);\n    });\n  } catch (error) {\n    console.error(\"❌ Failed to start server:\", error);\n    process.exit(1);\n  }\n})();\n","size_bytes":2797},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport recipesRouter from \"./routes/recipes\";\nimport feedRouter from \"./routes/feed\";\nimport userRouter from \"./routes/user\";\nimport adminRouter from \"./routes/admin\";\nimport healthRouter from \"./routes/health\";\nimport { errorHandler, notFoundHandler } from \"./middleware/errorHandler\";\nimport { idempotencyMiddleware, storeIdempotentResponse } from \"./middleware/idempotency\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Global middleware\n  app.use(idempotencyMiddleware);\n  app.use(storeIdempotentResponse);\n  \n  // API routes\n  app.use(\"/api/v1/recipes\", recipesRouter);\n  app.use(\"/api/v1/feed\", feedRouter);\n  app.use(\"/api/v1/me\", userRouter);\n  app.use(\"/api/v1/admin\", adminRouter);\n  \n  // Health checks (no /api prefix)\n  app.use(\"/\", healthRouter);\n  \n  // Error handling - Note: notFoundHandler will be added after Vite middleware in index.ts\n  app.use(errorHandler);\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":1066},"server/storage.ts":{"content":"import { db } from \"./config/database\";\nimport { users } from \"@shared/schema\";\nimport { eq } from \"drizzle-orm\";\nimport type { User, InsertUser } from \"@shared/schema\";\n\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  async getUser(id: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.id, id)).limit(1);\n    return result[0];\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.username, username)).limit(1);\n    return result[0];\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const result = await db.insert(users).values(insertUser).returning();\n    return result[0];\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":987},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, numeric, boolean, timestamp, jsonb, uuid, index, unique } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema, createSelectSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Taxonomy Tables\nexport const taxAllergens = pgTable(\"tax_allergens\", {\n  id: varchar(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  commonNames: text(\"common_names\").array(),\n  isTop9: boolean(\"is_top_9\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const taxDiets = pgTable(\"tax_diets\", {\n  id: varchar(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  category: varchar(\"category\"), // 'primary', 'lifestyle', 'medical'\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const taxCuisines = pgTable(\"tax_cuisines\", {\n  id: varchar(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  region: text(\"region\"),\n  parentId: varchar(\"parent_id\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const taxFlags = pgTable(\"tax_flags\", {\n  id: varchar(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  category: varchar(\"category\"), // 'health', 'preference', 'restriction'\n  description: text(\"description\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Core Recipe Tables\nexport const recipes = pgTable(\"recipes\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  imageUrl: text(\"image_url\"),\n  sourceUrl: text(\"source_url\"),\n  \n  // Nutrition (required for search/filtering)\n  calories: integer(\"calories\"),\n  proteinG: numeric(\"protein_g\", { precision: 8, scale: 2 }),\n  carbsG: numeric(\"carbs_g\", { precision: 8, scale: 2 }),\n  fatG: numeric(\"fat_g\", { precision: 8, scale: 2 }),\n  fiberG: numeric(\"fiber_g\", { precision: 8, scale: 2 }),\n  sugarG: numeric(\"sugar_g\", { precision: 8, scale: 2 }),\n  sodiumMg: integer(\"sodium_mg\"),\n  saturatedFatG: numeric(\"saturated_fat_g\", { precision: 8, scale: 2 }),\n  \n  // Recipe metadata\n  totalTimeMinutes: integer(\"total_time_minutes\"),\n  prepTimeMinutes: integer(\"prep_time_minutes\"),\n  cookTimeMinutes: integer(\"cook_time_minutes\"),\n  servings: integer(\"servings\"),\n  difficulty: varchar(\"difficulty\"), // 'easy', 'medium', 'hard'\n  mealType: varchar(\"meal_type\"), // 'breakfast', 'lunch', 'dinner', 'snack'\n  \n  // Taxonomy arrays\n  cuisines: text(\"cuisines\").array().default([]),\n  dietTags: text(\"diet_tags\").array().default([]),\n  allergens: text(\"allergens\").array().default([]),\n  flags: text(\"flags\").array().default([]),\n  \n  // Recipe content\n  ingredients: jsonb(\"ingredients\"), // Array of ingredient objects\n  instructions: jsonb(\"instructions\"), // Array of instruction steps\n  notes: text(\"notes\"),\n  \n  // Search and categorization\n  searchText: text(\"search_text\"), // Trigger-maintained for FTS\n  tsv: text(\"tsv\"), // Full-text search vector (tsvector)\n  \n  // Publishing\n  status: varchar(\"status\").default(\"draft\"), // 'draft', 'published', 'archived'\n  marketCountry: varchar(\"market_country\").default(\"US\"),\n  \n  // Tracking\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n  publishedAt: timestamp(\"published_at\"),\n  \n  // Source tracking\n  sourceType: varchar(\"source_type\").default(\"curated\"), // 'curated', 'user_generated'\n  sourceUserId: varchar(\"source_user_id\"), // For UGC approval tracking\n}, (table) => ({\n  cuisinesIdx: index(\"idx_recipes_cuisines\").using(\"gin\", table.cuisines),\n  dietTagsIdx: index(\"idx_recipes_diet_tags\").using(\"gin\", table.dietTags),\n  allergensIdx: index(\"idx_recipes_allergens\").using(\"gin\", table.allergens),\n  statusIdx: index(\"idx_recipes_status\").on(table.status),\n  marketIdx: index(\"idx_recipes_market\").on(table.marketCountry),\n  updatedAtIdx: index(\"idx_recipes_updated_at\").on(table.updatedAt),\n}));\n\n// User-Generated Content\nexport const userRecipes = pgTable(\"user_recipes\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  ownerUserId: varchar(\"owner_user_id\").notNull(),\n  \n  // Recipe data (same structure as recipes)\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  imageUrl: text(\"image_url\"),\n  \n  // Nutrition\n  calories: integer(\"calories\"),\n  proteinG: numeric(\"protein_g\", { precision: 8, scale: 2 }),\n  carbsG: numeric(\"carbs_g\", { precision: 8, scale: 2 }),\n  fatG: numeric(\"fat_g\", { precision: 8, scale: 2 }),\n  fiberG: numeric(\"fiber_g\", { precision: 8, scale: 2 }),\n  sugarG: numeric(\"sugar_g\", { precision: 8, scale: 2 }),\n  sodiumMg: integer(\"sodium_mg\"),\n  saturatedFatG: numeric(\"saturated_fat_g\", { precision: 8, scale: 2 }),\n  \n  // Recipe metadata\n  totalTimeMinutes: integer(\"total_time_minutes\"),\n  prepTimeMinutes: integer(\"prep_time_minutes\"),\n  cookTimeMinutes: integer(\"cook_time_minutes\"),\n  servings: integer(\"servings\"),\n  difficulty: varchar(\"difficulty\"),\n  mealType: varchar(\"meal_type\"),\n  \n  // Taxonomy\n  cuisines: text(\"cuisines\").array().default([]),\n  dietTags: text(\"diet_tags\").array().default([]),\n  allergens: text(\"allergens\").array().default([]),\n  flags: text(\"flags\").array().default([]),\n  \n  // Content\n  ingredients: jsonb(\"ingredients\"),\n  instructions: jsonb(\"instructions\"),\n  notes: text(\"notes\"),\n  \n  // Sharing and visibility\n  visibility: varchar(\"visibility\").default(\"private\"), // 'private', 'shared', 'submitted'\n  shareSlug: varchar(\"share_slug\").unique(),\n  \n  // Review workflow\n  submittedAt: timestamp(\"submitted_at\"),\n  reviewStatus: varchar(\"review_status\").default(\"pending\"), // 'pending', 'approved', 'rejected'\n  reviewedBy: varchar(\"reviewed_by\"),\n  reviewedAt: timestamp(\"reviewed_at\"),\n  reviewNotes: text(\"review_notes\"),\n  approvedRecipeId: uuid(\"approved_recipe_id\").references(() => recipes.id),\n  \n  // Tracking\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n}, (table) => ({\n  ownerIdx: index(\"idx_user_recipes_owner\").on(table.ownerUserId),\n  shareSlugIdx: index(\"idx_user_recipes_share_slug\").on(table.shareSlug),\n  reviewStatusIdx: index(\"idx_user_recipes_review_status\").on(table.reviewStatus),\n  submittedAtIdx: index(\"idx_user_recipes_submitted_at\").on(table.submittedAt),\n}));\n\n// User Interactions\nexport const savedRecipes = pgTable(\"saved_recipes\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull(),\n  recipeId: uuid(\"recipe_id\").notNull().references(() => recipes.id, { onDelete: \"cascade\" }),\n  savedAt: timestamp(\"saved_at\").defaultNow(),\n}, (table) => ({\n  userRecipeUnique: unique().on(table.userId, table.recipeId),\n  userIdx: index(\"idx_saved_recipes_user\").on(table.userId),\n  savedAtIdx: index(\"idx_saved_recipes_saved_at\").on(table.savedAt),\n}));\n\nexport const recipeHistory = pgTable(\"recipe_history\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull(),\n  recipeId: uuid(\"recipe_id\").notNull().references(() => recipes.id, { onDelete: \"cascade\" }),\n  event: varchar(\"event\").notNull(), // 'viewed', 'cooked', 'shared'\n  at: timestamp(\"at\").defaultNow(),\n  metadata: jsonb(\"metadata\"), // Additional event data\n}, (table) => ({\n  userRecipeEventIdx: index(\"idx_recipe_history_user_recipe_event\").on(table.userId, table.recipeId, table.event),\n  userEventAtIdx: index(\"idx_recipe_history_user_event_at\").on(table.userId, table.event, table.at),\n  recipeEventAtIdx: index(\"idx_recipe_history_recipe_event_at\").on(table.recipeId, table.event, table.at),\n}));\n\n// User Profiles\nexport const userProfiles = pgTable(\"user_profiles\", {\n  userId: varchar(\"user_id\").primaryKey(),\n  profileDiets: text(\"profile_diets\").array().default([]),\n  profileAllergens: text(\"profile_allergens\").array().default([]),\n  preferredCuisines: text(\"preferred_cuisines\").array().default([]),\n  \n  // Macro targets (for personalized feed)\n  targetCalories: integer(\"target_calories\"),\n  targetProteinG: numeric(\"target_protein_g\", { precision: 8, scale: 2 }),\n  targetCarbsG: numeric(\"target_carbs_g\", { precision: 8, scale: 2 }),\n  targetFatG: numeric(\"target_fat_g\", { precision: 8, scale: 2 }),\n  \n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Moderation System\nexport const recipeReports = pgTable(\"recipe_reports\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  reporterUserId: varchar(\"reporter_user_id\").notNull(),\n  recipeId: uuid(\"recipe_id\").references(() => recipes.id),\n  userRecipeId: uuid(\"user_recipe_id\").references(() => userRecipes.id),\n  \n  category: varchar(\"category\").notNull(), // 'inappropriate', 'copyright', 'nutrition', 'spam'\n  reason: text(\"reason\").notNull(),\n  description: text(\"description\"),\n  \n  status: varchar(\"status\").default(\"open\"), // 'open', 'investigating', 'resolved', 'dismissed'\n  priority: varchar(\"priority\").default(\"medium\"), // 'low', 'medium', 'high', 'critical'\n  \n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n}, (table) => ({\n  statusIdx: index(\"idx_recipe_reports_status\").on(table.status),\n  priorityIdx: index(\"idx_recipe_reports_priority\").on(table.priority),\n  createdAtIdx: index(\"idx_recipe_reports_created_at\").on(table.createdAt),\n}));\n\nexport const recipeReportResolutions = pgTable(\"recipe_report_resolutions\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  reportId: uuid(\"report_id\").notNull().references(() => recipeReports.id),\n  resolvedBy: varchar(\"resolved_by\").notNull(),\n  action: varchar(\"action\").notNull(), // 'dismiss', 'remove_content', 'warn_user', 'ban_user'\n  reason: text(\"reason\").notNull(),\n  notes: text(\"notes\"),\n  \n  createdAt: timestamp(\"created_at\").defaultNow(),\n}, (table) => ({\n  reportIdx: index(\"idx_report_resolutions_report\").on(table.reportId),\n  resolvedByIdx: index(\"idx_report_resolutions_resolved_by\").on(table.resolvedBy),\n}));\n\n// Admin and Security\nexport const auditLog = pgTable(\"audit_log\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  at: timestamp(\"at\").defaultNow(),\n  actorUserId: varchar(\"actor_user_id\").notNull(),\n  action: varchar(\"action\").notNull(),\n  targetTable: varchar(\"target_table\").notNull(),\n  targetId: varchar(\"target_id\").notNull(),\n  diff: jsonb(\"diff\"), // { before: {...}, after: {...} }\n  reason: text(\"reason\"),\n  ip: varchar(\"ip\"),\n  ua: text(\"ua\"), // User agent\n}, (table) => ({\n  atIdx: index(\"idx_audit_log_at\").on(table.at),\n  actorIdx: index(\"idx_audit_log_actor\").on(table.actorUserId),\n  actionIdx: index(\"idx_audit_log_action\").on(table.action),\n  targetIdx: index(\"idx_audit_log_target\").on(table.targetTable, table.targetId),\n}));\n\nexport const idempotencyKeys = pgTable(\"idempotency_keys\", {\n  key: varchar(\"key\").primaryKey(),\n  method: varchar(\"method\").notNull(),\n  path: text(\"path\").notNull(),\n  requestHash: varchar(\"request_hash\").notNull(),\n  responseStatus: integer(\"response_status\"),\n  responseBody: jsonb(\"response_body\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  processedAt: timestamp(\"processed_at\"),\n}, (table) => ({\n  createdAtIdx: index(\"idx_idempotency_created_at\").on(table.createdAt),\n}));\n\n// Insert/Select schemas\nexport const insertRecipeSchema = createInsertSchema(recipes).omit({\n  id: true,\n  searchText: true,\n  tsv: true,\n  createdAt: true,\n  updatedAt: true,\n  publishedAt: true,\n});\n\nexport const insertUserRecipeSchema = createInsertSchema(userRecipes).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  submittedAt: true,\n  reviewedAt: true,\n  approvedRecipeId: true,\n});\n\nexport const insertSavedRecipeSchema = createInsertSchema(savedRecipes).omit({\n  id: true,\n  savedAt: true,\n});\n\nexport const insertRecipeHistorySchema = createInsertSchema(recipeHistory).omit({\n  id: true,\n  at: true,\n});\n\nexport const insertUserProfileSchema = createInsertSchema(userProfiles).omit({\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertRecipeReportSchema = createInsertSchema(recipeReports).omit({\n  id: true,\n  status: true,\n  priority: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\n// Types\nexport type Recipe = typeof recipes.$inferSelect;\nexport type InsertRecipe = z.infer<typeof insertRecipeSchema>;\nexport type UserRecipe = typeof userRecipes.$inferSelect;\nexport type InsertUserRecipe = z.infer<typeof insertUserRecipeSchema>;\nexport type SavedRecipe = typeof savedRecipes.$inferSelect;\nexport type InsertSavedRecipe = z.infer<typeof insertSavedRecipeSchema>;\nexport type RecipeHistory = typeof recipeHistory.$inferSelect;\nexport type InsertRecipeHistory = z.infer<typeof insertRecipeHistorySchema>;\nexport type UserProfile = typeof userProfiles.$inferSelect;\nexport type InsertUserProfile = z.infer<typeof insertUserProfileSchema>;\nexport type RecipeReport = typeof recipeReports.$inferSelect;\nexport type InsertRecipeReport = z.infer<typeof insertRecipeReportSchema>;\nexport type AuditLog = typeof auditLog.$inferSelect;\n\n// Legacy user table (keeping for compatibility)\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n","size_bytes":13502},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport NotFound from \"@/pages/not-found\";\nimport AdminDashboard from \"@/pages/admin-dashboard\";\nimport AdminRecipes from \"@/pages/admin-recipes\";\nimport AdminUsers from \"@/pages/admin-users\";\nimport AdminUserContent from \"@/pages/admin-user-content\";\nimport AdminSearch from \"@/pages/admin-search\";\nimport AdminPerformance from \"@/pages/admin-performance\";\nimport AdminAudit from \"@/pages/admin-audit\";\nimport AdminDatabase from \"@/pages/admin-database\";\nimport AdminAuth from \"@/pages/admin-auth\";\nimport AdminTeams from \"@/pages/admin-teams\";\nimport AdminRateLimits from \"@/pages/admin-rate-limits\";\nimport Home from \"@/pages/home\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/admin\" component={AdminDashboard} />\n      <Route path=\"/admin/\" component={AdminDashboard} />\n      <Route path=\"/admin/recipes\" component={AdminRecipes} />\n      <Route path=\"/admin/users\" component={AdminUsers} />\n      <Route path=\"/admin/user-content\" component={AdminUserContent} />\n      <Route path=\"/admin/search\" component={AdminSearch} />\n      <Route path=\"/admin/performance\" component={AdminPerformance} />\n      <Route path=\"/admin/audit\" component={AdminAudit} />\n      <Route path=\"/admin/database\" component={AdminDatabase} />\n      <Route path=\"/admin/auth\" component={AdminAuth} />\n      <Route path=\"/admin/teams\" component={AdminTeams} />\n      <Route path=\"/admin/rate-limits\" component={AdminRateLimits} />\n      {/* Fallback to 404 */}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2040},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(210 25% 7.8431%);\n  --card: hsl(180 6.6667% 97.0588%);\n  --card-foreground: hsl(210 25% 7.8431%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(210 25% 7.8431%);\n  --primary: hsl(203.8863 88.2845% 53.1373%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(210 25% 7.8431%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(240 1.9608% 90%);\n  --muted-foreground: hsl(210 25% 7.8431%);\n  --accent: hsl(211.5789 51.3514% 92.7451%);\n  --accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(201.4286 30.4348% 90.9804%);\n  --input: hsl(200 23.0769% 97.4510%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(180 6.6667% 97.0588%);\n  --sidebar-foreground: hsl(210 25% 7.8431%);\n  --sidebar-primary: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(211.5789 51.3514% 92.7451%);\n  --sidebar-accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-border: hsl(205.0000 25.0000% 90.5882%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: Open Sans, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(0 0% 0%);\n  --foreground: hsl(200 6.6667% 91.1765%);\n  --card: hsl(228 9.8039% 10%);\n  --card-foreground: hsl(0 0% 85.0980%);\n  --popover: hsl(0 0% 0%);\n  --popover-foreground: hsl(200 6.6667% 91.1765%);\n  --primary: hsl(203.7736 87.6033% 52.5490%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(195.0000 15.3846% 94.9020%);\n  --secondary-foreground: hsl(210 25% 7.8431%);\n  --muted: hsl(0 0% 9.4118%);\n  --muted-foreground: hsl(210 3.3898% 46.2745%);\n  --accent: hsl(205.7143 70% 7.8431%);\n  --accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(210 5.2632% 14.9020%);\n  --input: hsl(207.6923 27.6596% 18.4314%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(228 9.8039% 10%);\n  --sidebar-foreground: hsl(0 0% 85.0980%);\n  --sidebar-primary: hsl(202.8169 89.1213% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(205.7143 70% 7.8431%);\n  --sidebar-accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --sidebar-border: hsl(205.7143 15.7895% 26.0784%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: Open Sans, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}","size_bytes":5055},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/auth/admin.ts":{"content":"import type { Request } from \"express\";\nimport { UserContext } from \"./jwt\";\nimport { auditImpersonation } from \"../services/admin\";\n\nexport interface AdminContext extends UserContext {\n  effectiveUserId: string;\n  isImpersonating: boolean;\n}\n\nexport async function handleAdminImpersonation(\n  request: Request,\n  userContext: UserContext\n): Promise<AdminContext> {\n  const actAsUser = request.headers['x-act-as-user'] as string;\n  \n  // Only allow impersonation for GET requests and admin users\n  if (actAsUser && request.method === 'GET' && userContext.isAdmin) {\n    // Audit the impersonation\n    await auditImpersonation(\n      userContext.userId,\n      actAsUser,\n      request.url,\n      request.ip,\n      request.headers['user-agent']\n    );\n    \n    return {\n      ...userContext,\n      effectiveUserId: actAsUser,\n      isImpersonating: true,\n    };\n  }\n  \n  return {\n    ...userContext,\n    effectiveUserId: userContext.userId,\n    isImpersonating: false,\n  };\n}\n\nexport function requireAdmin(userContext: UserContext): void {\n  if (!userContext.isAdmin) {\n    throw new Error(\"Admin access required\");\n  }\n}\n","size_bytes":1120},"server/auth/jwt.ts":{"content":"import { account } from \"../config/appwrite\";\nimport { verifyAdminStatus } from \"../config/appwrite\";\n\nexport interface UserContext {\n  userId: string;\n  isAdmin: boolean;\n  profile?: any;\n}\n\nexport async function verifyAppwriteJWT(jwt: string): Promise<UserContext> {\n  if (!jwt) {\n    throw new Error(\"X-Appwrite-JWT header required\");\n  }\n  \n  try {\n    // Set the JWT session for this client\n    const client = account.client.setJWT(jwt);\n    const decoded = await account.get();\n    \n    // Verify admin status\n    const isAdmin = await verifyAdminStatus(decoded.$id, decoded.prefs);\n    \n    return {\n      userId: decoded.$id,\n      isAdmin,\n      profile: decoded.prefs,\n    };\n  } catch (error) {\n    console.error(\"JWT verification failed:\", error);\n    throw new Error(\"Invalid or expired JWT token\");\n  }\n}\n\nexport function extractJWTFromHeaders(headers: Record<string, string | string[] | undefined>): string | null {\n  const jwt = headers['x-appwrite-jwt'];\n  if (typeof jwt === 'string') {\n    return jwt;\n  }\n  return null;\n}\n","size_bytes":1042},"server/config/appwrite.ts":{"content":"import { Client, Account, Teams } from \"appwrite\";\nimport { env } from \"./env\";\n\nif (!env.APPWRITE_ENDPOINT || !env.APPWRITE_PROJECT_ID) {\n  throw new Error(\"Appwrite configuration is required\");\n}\n\nexport const appwriteClient = new Client()\n  .setEndpoint(env.APPWRITE_ENDPOINT)\n  .setProject(env.APPWRITE_PROJECT_ID);\n\nexport const account = new Account(appwriteClient);\nexport const teams = new Teams(appwriteClient);\n\n// Admin verification functions\nexport async function isTeamMember(userId: string, teamId: string): Promise<boolean> {\n  try {\n    const memberships = await teams.listMemberships(teamId);\n    return memberships.memberships.some(m => m.userId === userId);\n  } catch (error) {\n    console.error(\"Error checking team membership:\", error);\n    return false;\n  }\n}\n\nexport async function verifyAdminStatus(userId: string, userProfile?: any): Promise<boolean> {\n  // Check if user has admin role in profile\n  if (userProfile?.role === 'admin') {\n    return true;\n  }\n  \n  // Check if user is member of admin team\n  if (env.ADMINS_TEAM_ID) {\n    return await isTeamMember(userId, env.ADMINS_TEAM_ID);\n  }\n  \n  return false;\n}\n","size_bytes":1141},"server/config/database.ts":{"content":"import { drizzle } from \"drizzle-orm/postgres-js\";\nimport postgres from \"postgres\";\nimport * as schema from \"@shared/schema\";\nimport { env } from \"./env\";\n\nif (!env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL environment variable is required\");\n}\n\n// Connection for queries\nexport const queryClient = postgres(env.DATABASE_URL, {\n  max: 10,\n  idle_timeout: 20,\n  connect_timeout: 10,\n});\n\n// Drizzle instance\nexport const db = drizzle(queryClient, { schema });\n\n// Connection for migrations\nexport const migrationClient = postgres(env.DATABASE_URL, {\n  max: 1,\n});\n\n// Set application name for easier debugging\nqueryClient`SET application_name = 'nutrition-app-api'`;\n\n// Function to set current user for RLS\nexport async function setCurrentUser(userId: string) {\n  // Use a simple approach for RLS - many systems don't need complex user context\n  try {\n    await executeRaw(`SET LOCAL app.current_user_id = '${userId}'`);\n  } catch (error) {\n    // If RLS isn't set up or fails, continue silently for development\n    console.log(`[DB] RLS user context not available: ${error}`);\n  }\n}\n\n// Function to execute raw SQL (for functions/procedures)\nexport async function executeRaw(sql: string, params: any[] = []) {\n  return queryClient.unsafe(sql, params);\n}\n\n// Health check function\nexport async function checkDatabaseHealth(): Promise<boolean> {\n  try {\n    await queryClient`SELECT 1`;\n    return true;\n  } catch (error) {\n    console.error(\"Database health check failed:\", error);\n    return false;\n  }\n}\n\nexport default db;\n","size_bytes":1532},"server/config/env.ts":{"content":"import { z } from \"zod\";\n\nconst envSchema = z.object({\n  NODE_ENV: z.enum([\"development\", \"production\", \"test\"]).default(\"development\"),\n  PORT: z.string().transform(Number).default(\"5000\"),\n  \n  // Database\n  DATABASE_URL: z.string().url(),\n  \n  // Appwrite\n  APPWRITE_ENDPOINT: z.string().url(),\n  APPWRITE_PROJECT_ID: z.string(),\n  ADMINS_TEAM_ID: z.string().optional(),\n  \n  // Rate limiting\n  RATE_LIMITS_READ_RPM: z.string().transform(Number).default(\"60\"),\n  RATE_LIMITS_WRITE_RPM: z.string().transform(Number).default(\"6\"),\n});\n\nfunction validateEnv() {\n  try {\n    return envSchema.parse(process.env);\n  } catch (error) {\n    console.error(\"❌ Invalid environment variables:\", error);\n    process.exit(1);\n  }\n}\n\nexport const env = validateEnv();\n","size_bytes":757},"server/middleware/audit.ts":{"content":"import type { Request, Response, NextFunction } from \"express\";\nimport { auditLog } from \"@shared/schema\";\nimport { db } from \"../config/database\";\n\nexport async function auditLogEntry(\n  actorUserId: string,\n  action: string,\n  targetTable: string,\n  targetId: string,\n  before?: any,\n  after?: any,\n  reason?: string,\n  ip?: string,\n  userAgent?: string\n): Promise<void> {\n  try {\n    await db.insert(auditLog).values({\n      actorUserId,\n      action,\n      targetTable,\n      targetId,\n      diff: before || after ? { before, after } : null,\n      reason,\n      ip,\n      ua: userAgent,\n    });\n  } catch (error) {\n    console.error(\"Failed to write audit log:\", error);\n    // Don't throw - audit logging should not break the main operation\n  }\n}\n\nexport function auditedRoute(handler: (req: Request, res: Response, next: NextFunction) => Promise<any>) {\n  return async (req: Request, res: Response, next: NextFunction) => {\n    let before: any = null;\n    let after: any = null;\n    \n    try {\n      // Capture before state for updates/deletes\n      if (['PUT', 'PATCH', 'DELETE'].includes(req.method) && req.params.id) {\n        // This would need to be customized per route to get the correct \"before\" state\n        // For now, we'll just log the action\n      }\n      \n      // Execute the handler\n      const result = await handler(req, res, next);\n      \n      // Capture after state\n      if (['POST', 'PUT', 'PATCH'].includes(req.method)) {\n        after = result;\n      }\n      \n      // Log the action\n      if (req.user) {\n        await auditLogEntry(\n          req.user.userId,\n          `${req.method.toLowerCase()}_${req.route?.path || req.path}`,\n          'various', // Would be specific to each route\n          req.params.id || 'unknown',\n          before,\n          after,\n          req.body?.reason,\n          req.ip,\n          req.headers['user-agent']\n        );\n      }\n      \n      return result;\n    } catch (error) {\n      next(error);\n    }\n  };\n}\n","size_bytes":1978},"server/middleware/auth.ts":{"content":"import type { Request, Response, NextFunction } from \"express\";\nimport { verifyAppwriteJWT, extractJWTFromHeaders } from \"../auth/jwt\";\nimport { handleAdminImpersonation } from \"../auth/admin\";\nimport { setCurrentUser } from \"../config/database\";\n\ndeclare global {\n  namespace Express {\n    interface Request {\n      user?: any;\n    }\n  }\n}\n\nexport async function authMiddleware(req: Request, res: Response, next: NextFunction) {\n  try {\n    console.log(`[AUTH] Processing request: ${req.url}, NODE_ENV: ${process.env.NODE_ENV}, includes admin: ${req.url.includes('/admin')}`);\n    \n    // Development bypass for admin routes\n    if (process.env.NODE_ENV === 'development' && req.url.includes('/admin')) {\n      console.log(`[AUTH] Development bypass activated for: ${req.url}`);\n      req.user = {\n        userId: 'dev-admin-user',\n        isAdmin: true,\n        effectiveUserId: 'dev-admin-user',\n        isImpersonating: false,\n        profile: { role: 'admin' }\n      };\n      await setCurrentUser('dev-admin-user');\n      return next();\n    }\n    \n    const jwt = extractJWTFromHeaders(req.headers);\n    \n    if (!jwt) {\n      return res.status(401).json({\n        type: 'about:blank',\n        title: 'Unauthorized',\n        status: 401,\n        detail: 'X-Appwrite-JWT header required',\n        instance: req.url\n      });\n    }\n    \n    // Verify JWT and get user context\n    const userContext = await verifyAppwriteJWT(jwt);\n    \n    // Handle admin impersonation\n    const adminContext = await handleAdminImpersonation(req, userContext);\n    \n    // Set current user for RLS\n    await setCurrentUser(adminContext.effectiveUserId);\n    \n    // Attach to request\n    req.user = adminContext;\n    \n    next();\n  } catch (error: any) {\n    res.status(401).json({\n      type: 'about:blank',\n      title: 'Unauthorized',\n      status: 401,\n      detail: error.message || 'Authentication failed',\n      instance: req.url\n    });\n  }\n}\n\nexport function optionalAuth(req: Request, res: Response, next: NextFunction) {\n  const jwt = extractJWTFromHeaders(req.headers);\n  \n  if (!jwt) {\n    return next();\n  }\n  \n  authMiddleware(req, res, next);\n}\n","size_bytes":2147},"server/middleware/errorHandler.ts":{"content":"import type { Request, Response, NextFunction } from \"express\";\n\nexport interface ProblemDetail {\n  type: string;\n  title: string;\n  status: number;\n  detail: string;\n  instance: string;\n  [key: string]: any;\n}\n\nexport class AppError extends Error {\n  constructor(\n    public status: number,\n    public title: string,\n    public detail: string,\n    public type: string = 'about:blank',\n    public extra?: Record<string, any>\n  ) {\n    super(detail);\n    this.name = 'AppError';\n  }\n}\n\nexport function errorHandler(err: any, req: Request, res: Response, next: NextFunction) {\n  // If headers already sent, delegate to default Express error handler\n  if (res.headersSent) {\n    return next(err);\n  }\n  \n  console.error('Error:', err);\n  \n  let problemDetail: ProblemDetail;\n  \n  if (err instanceof AppError) {\n    problemDetail = {\n      type: err.type,\n      title: err.title,\n      status: err.status,\n      detail: err.detail,\n      instance: req.url,\n      ...err.extra,\n    };\n  } else if (err.name === 'ValidationError' || err.validation) {\n    problemDetail = {\n      type: 'https://nutrition-app.com/validation-error',\n      title: 'Validation Error',\n      status: 400,\n      detail: 'Request validation failed',\n      instance: req.url,\n      errors: err.validation || err.details,\n    };\n  } else if (err.code === '23505') { // PostgreSQL unique violation\n    problemDetail = {\n      type: 'https://nutrition-app.com/duplicate-resource',\n      title: 'Duplicate Resource',\n      status: 409,\n      detail: 'A resource with this identifier already exists',\n      instance: req.url,\n    };\n  } else if (err.code === '23503') { // PostgreSQL foreign key violation\n    problemDetail = {\n      type: 'https://nutrition-app.com/reference-error',\n      title: 'Reference Error',\n      status: 400,\n      detail: 'Referenced resource does not exist',\n      instance: req.url,\n    };\n  } else {\n    problemDetail = {\n      type: 'about:blank',\n      title: 'Internal Server Error',\n      status: 500,\n      detail: 'An unexpected error occurred',\n      instance: req.url,\n    };\n  }\n  \n  res\n    .status(problemDetail.status)\n    .type('application/problem+json')\n    .json(problemDetail);\n}\n\nexport function notFoundHandler(req: Request, res: Response) {\n  res.status(404).json({\n    type: 'about:blank',\n    title: 'Not Found',\n    status: 404,\n    detail: `No resource found at ${req.path}`,\n    instance: req.url,\n  });\n}\n","size_bytes":2426},"server/middleware/idempotency.ts":{"content":"import type { Request, Response, NextFunction } from \"express\";\nimport { createHash } from \"crypto\";\nimport { db } from \"../config/database\";\nimport { idempotencyKeys } from \"@shared/schema\";\nimport { eq, and } from \"drizzle-orm\";\n\nexport async function idempotencyMiddleware(req: Request, res: Response, next: NextFunction) {\n  const idempotencyKey = req.headers['idempotency-key'] as string;\n  \n  // Require idempotency key for state-changing operations\n  if (['POST', 'PUT', 'PATCH'].includes(req.method) && !idempotencyKey) {\n    return res.status(400).json({\n      type: 'about:blank',\n      title: 'Bad Request',\n      status: 400,\n      detail: 'Idempotency-Key header required for state-changing operations',\n      instance: req.url\n    });\n  }\n  \n  if (!idempotencyKey) {\n    return next();\n  }\n  \n  try {\n    // Create request hash\n    const requestHash = createHash('sha256')\n      .update(JSON.stringify(req.body || {}))\n      .digest('hex');\n    \n    // Check for existing request\n    const existing = await db\n      .select()\n      .from(idempotencyKeys)\n      .where(\n        and(\n          eq(idempotencyKeys.key, idempotencyKey),\n          eq(idempotencyKeys.method, req.method),\n          eq(idempotencyKeys.path, req.path)\n        )\n      )\n      .limit(1);\n    \n    if (existing.length > 0) {\n      const record = existing[0];\n      \n      // Check if request body is different\n      if (record.requestHash !== requestHash) {\n        return res.status(409).json({\n          type: 'about:blank',\n          title: 'Conflict',\n          status: 409,\n          detail: 'Idempotency key reused with different request body',\n          instance: req.url\n        });\n      }\n      \n      // Return cached response if already processed\n      if (record.responseStatus && record.responseBody) {\n        return res.status(record.responseStatus).json(record.responseBody);\n      }\n    } else {\n      // Store new idempotency key\n      await db.insert(idempotencyKeys).values({\n        key: idempotencyKey,\n        method: req.method,\n        path: req.path,\n        requestHash,\n      });\n    }\n    \n    // Store idempotency info for response handling\n    res.locals.idempotencyKey = idempotencyKey;\n    \n    next();\n  } catch (error) {\n    console.error(\"Idempotency middleware error:\", error);\n    next();\n  }\n}\n\n// Middleware to store response for idempotency\nexport function storeIdempotentResponse(req: Request, res: Response, next: NextFunction) {\n  const originalJson = res.json;\n  const idempotencyKey = res.locals.idempotencyKey;\n  \n  if (idempotencyKey && ['POST', 'PUT', 'PATCH'].includes(req.method)) {\n    res.json = function(body: any) {\n      // Store the response\n      db.update(idempotencyKeys)\n        .set({\n          responseStatus: res.statusCode,\n          responseBody: body,\n          processedAt: new Date(),\n        })\n        .where(eq(idempotencyKeys.key, idempotencyKey))\n        .catch(err => console.error(\"Failed to store idempotent response:\", err));\n      \n      return originalJson.call(this, body);\n    };\n  }\n  \n  next();\n}\n","size_bytes":3070},"server/middleware/rateLimit.ts":{"content":"import type { Request, Response, NextFunction } from \"express\";\nimport { env } from \"../config/env\";\n\n// In-memory rate limiting store (use Redis in production)\nconst rateLimitStore = new Map<string, { count: number; resetTime: number }>();\n\nexport async function rateLimitMiddleware(req: Request, res: Response, next: NextFunction) {\n  if (!req.user) {\n    return next(); // Skip rate limiting for unauthenticated requests\n  }\n  \n  const userId = req.user.userId;\n  const isHeavyWrite = ['POST', 'PUT', 'PATCH', 'DELETE'].includes(req.method);\n  const limit = isHeavyWrite ? env.RATE_LIMITS_WRITE_RPM : env.RATE_LIMITS_READ_RPM;\n  const windowMs = 60 * 1000; // 1 minute window\n  \n  const bucket = `${userId}:${isHeavyWrite ? 'write' : 'read'}`;\n  const now = Date.now();\n  const windowStart = now - windowMs;\n  \n  // Get current bucket state\n  let bucketState = rateLimitStore.get(bucket);\n  \n  // Reset if window has passed\n  if (!bucketState || bucketState.resetTime <= now) {\n    bucketState = {\n      count: 0,\n      resetTime: now + windowMs\n    };\n  }\n  \n  // Increment counter\n  bucketState.count++;\n  rateLimitStore.set(bucket, bucketState);\n  \n  // Calculate remaining requests\n  const remaining = Math.max(0, limit - bucketState.count);\n  const resetTime = new Date(bucketState.resetTime);\n  \n  // Set rate limit headers\n  res.setHeader('RateLimit', remaining.toString());\n  res.setHeader('RateLimit-Policy', `${limit};w=60`);\n  res.setHeader('RateLimit-Reset', resetTime.toISOString());\n  \n  // Check if limit exceeded\n  if (bucketState.count > limit) {\n    return res.status(429).json({\n      type: 'about:blank',\n      title: 'Too Many Requests',\n      status: 429,\n      detail: `Rate limit exceeded. ${limit} requests per minute allowed.`,\n      instance: req.url\n    });\n  }\n  \n  next();\n}\n\n// Cleanup old entries periodically\nsetInterval(() => {\n  const now = Date.now();\n  for (const [key, bucket] of rateLimitStore.entries()) {\n    if (bucket.resetTime <= now) {\n      rateLimitStore.delete(key);\n    }\n  }\n}, 5 * 60 * 1000); // Cleanup every 5 minutes\n","size_bytes":2074},"server/routes/admin.ts":{"content":"import { Router } from \"express\";\nimport { z } from \"zod\";\nimport { authMiddleware } from \"../middleware/auth\";\nimport { rateLimitMiddleware } from \"../middleware/rateLimit\";\nimport { auditedRoute } from \"../middleware/audit\";\nimport { requireAdmin } from \"../auth/admin\";\nimport { setCurrentUser } from \"../config/database\";\nimport { \n  createCuratedRecipe, \n  updateCuratedRecipe, \n  deleteCuratedRecipe,\n  getReports,\n  resolveReport,\n  getAuditLog,\n  refreshMaterializedViews,\n  getDashboardStats\n} from \"../services/admin\";\nimport { approveUserRecipe, rejectUserRecipe } from \"../services/userContent\";\nimport { insertRecipeSchema } from \"@shared/schema\";\n\nconst router = Router();\n\n// Development bypass for all admin routes\nif (process.env.NODE_ENV === 'development') {\n  router.use(async (req, res, next) => {\n    console.log(`[ADMIN] Development bypass for: ${req.url}`);\n    req.user = {\n      userId: 'dev-admin-user',\n      isAdmin: true,\n      effectiveUserId: 'dev-admin-user',\n      isImpersonating: false,\n      profile: { role: 'admin' }\n    };\n    await setCurrentUser('dev-admin-user');\n    next();\n  });\n} else {\n  // Require admin for all routes in production\n  router.use(authMiddleware);\n  router.use((req, res, next) => {\n    requireAdmin(req.user);\n    next();\n  });\n}\nrouter.use(rateLimitMiddleware);\n\n// Dashboard\nrouter.get(\"/dashboard\", async (req, res, next) => {\n  try {\n    const stats = await getDashboardStats();\n    res.json(stats);\n  } catch (error) {\n    next(error);\n  }\n});\n\n// Curated recipe management\nrouter.post(\"/recipes\", auditedRoute(async (req, res, next) => {\n  try {\n    const recipeData = insertRecipeSchema.parse(req.body);\n    const recipe = await createCuratedRecipe(req.user.userId, recipeData, req.body.reason);\n    res.status(201).json(recipe);\n  } catch (error) {\n    next(error);\n  }\n}));\n\nrouter.put(\"/recipes/:id\", auditedRoute(async (req, res, next) => {\n  try {\n    const updates = insertRecipeSchema.partial().parse(req.body);\n    const recipe = await updateCuratedRecipe(req.user.userId, req.params.id, updates, req.body.reason);\n    res.json(recipe);\n  } catch (error) {\n    next(error);\n  }\n}));\n\nrouter.delete(\"/recipes/:id\", auditedRoute(async (req, res, next) => {\n  try {\n    const { reason } = req.body;\n    if (!reason) {\n      return res.status(400).json({\n        type: 'about:blank',\n        title: 'Bad Request',\n        status: 400,\n        detail: 'Reason is required for recipe deletion',\n        instance: req.url\n      });\n    }\n    \n    const result = await deleteCuratedRecipe(req.user.userId, req.params.id, reason);\n    res.json(result);\n  } catch (error) {\n    next(error);\n  }\n}));\n\n// User content moderation\nrouter.post(\"/user-recipes/:id/approve\", auditedRoute(async (req, res, next) => {\n  try {\n    const { reviewNotes } = req.body;\n    const recipe = await approveUserRecipe(req.user.userId, req.params.id, reviewNotes);\n    res.json(recipe);\n  } catch (error) {\n    next(error);\n  }\n}));\n\nrouter.post(\"/user-recipes/:id/reject\", auditedRoute(async (req, res, next) => {\n  try {\n    const { reviewNotes } = req.body;\n    if (!reviewNotes) {\n      return res.status(400).json({\n        type: 'about:blank',\n        title: 'Bad Request',\n        status: 400,\n        detail: 'Review notes are required for rejection',\n        instance: req.url\n      });\n    }\n    \n    const recipe = await rejectUserRecipe(req.user.userId, req.params.id, reviewNotes);\n    res.json(recipe);\n  } catch (error) {\n    next(error);\n  }\n}));\n\n// Reports and moderation\nrouter.get(\"/reports\", async (req, res, next) => {\n  try {\n    const status = req.query.status as string;\n    const limit = req.query.limit ? parseInt(req.query.limit as string) : 50;\n    const offset = req.query.offset ? parseInt(req.query.offset as string) : 0;\n    \n    const reports = await getReports(status, limit, offset);\n    res.json(reports);\n  } catch (error) {\n    next(error);\n  }\n});\n\nrouter.post(\"/reports/:id/resolve\", auditedRoute(async (req, res, next) => {\n  try {\n    const { action, reason, notes } = req.body;\n    \n    const schema = z.object({\n      action: z.enum(['dismiss', 'remove_content', 'warn_user', 'ban_user']),\n      reason: z.string().min(1),\n      notes: z.string().optional(),\n    });\n    \n    const validated = schema.parse({ action, reason, notes });\n    \n    const resolution = await resolveReport(\n      req.user.userId,\n      req.params.id,\n      validated.action,\n      validated.reason,\n      validated.notes\n    );\n    \n    res.json(resolution);\n  } catch (error) {\n    next(error);\n  }\n}));\n\n// Audit logs\nrouter.get(\"/audit\", async (req, res, next) => {\n  try {\n    const limit = req.query.limit ? parseInt(req.query.limit as string) : 100;\n    const offset = req.query.offset ? parseInt(req.query.offset as string) : 0;\n    const actorUserId = req.query.actor_user_id as string;\n    \n    const logs = await getAuditLog(limit, offset, actorUserId);\n    res.json(logs);\n  } catch (error) {\n    next(error);\n  }\n});\n\n// System operations\nrouter.post(\"/refresh-materialized-views\", auditedRoute(async (req, res, next) => {\n  try {\n    const result = await refreshMaterializedViews();\n    res.json(result);\n  } catch (error) {\n    next(error);\n  }\n}));\n\nexport default router;\n","size_bytes":5259},"server/routes/feed.ts":{"content":"import { Router } from \"express\";\nimport { authMiddleware } from \"../middleware/auth\";\nimport { rateLimitMiddleware } from \"../middleware/rateLimit\";\nimport { getPersonalizedFeed, getFeedRecommendations, createOrUpdateUserProfile, getUserProfile } from \"../services/feed\";\n\nconst router = Router();\n\nrouter.get(\"/\", authMiddleware, rateLimitMiddleware, async (req, res, next) => {\n  try {\n    const limit = req.query.limit ? parseInt(req.query.limit as string) : 50;\n    const offset = req.query.offset ? parseInt(req.query.offset as string) : 0;\n    \n    const results = await getPersonalizedFeed(req.user.effectiveUserId, limit, offset);\n    res.json(results);\n  } catch (error) {\n    next(error);\n  }\n});\n\nrouter.get(\"/recommendations\", authMiddleware, rateLimitMiddleware, async (req, res, next) => {\n  try {\n    const recommendations = await getFeedRecommendations(req.user.effectiveUserId);\n    res.json(recommendations);\n  } catch (error) {\n    next(error);\n  }\n});\n\nexport default router;\n","size_bytes":997},"server/routes/health.ts":{"content":"import { Router } from \"express\";\nimport { checkDatabaseHealth } from \"../config/database\";\n\nconst router = Router();\n\nrouter.get(\"/healthz\", async (req, res) => {\n  const dbHealthy = await checkDatabaseHealth();\n  \n  if (dbHealthy) {\n    res.status(200).json({\n      status: \"healthy\",\n      timestamp: new Date().toISOString(),\n      services: {\n        database: \"healthy\",\n        api: \"healthy\"\n      }\n    });\n  } else {\n    res.status(503).json({\n      status: \"unhealthy\",\n      timestamp: new Date().toISOString(),\n      services: {\n        database: \"unhealthy\",\n        api: \"healthy\"\n      }\n    });\n  }\n});\n\nrouter.get(\"/readyz\", async (req, res) => {\n  // More comprehensive readiness check\n  const dbHealthy = await checkDatabaseHealth();\n  \n  const ready = dbHealthy;\n  \n  if (ready) {\n    res.status(200).json({\n      status: \"ready\",\n      timestamp: new Date().toISOString()\n    });\n  } else {\n    res.status(503).json({\n      status: \"not ready\",\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\nexport default router;\n","size_bytes":1049},"server/routes/recipes.ts":{"content":"import { Router } from \"express\";\nimport { z } from \"zod\";\nimport { authMiddleware } from \"../middleware/auth\";\nimport { rateLimitMiddleware } from \"../middleware/rateLimit\";\nimport { searchRecipes, getRecipeDetail, getPopularRecipes } from \"../services/search\";\nimport { toggleSaveRecipe, getSavedRecipes, logRecipeHistory, getRecipeHistory, getRecentlyViewed, getMostCooked, getSharedRecipe } from \"../services/recipes\";\nimport { insertRecipeHistorySchema, insertRecipeReportSchema } from \"@shared/schema\";\nimport { db } from \"../config/database\";\nimport { recipeReports } from \"@shared/schema\";\n\nconst router = Router();\n\n// Search and browsing\nrouter.get(\"/\", rateLimitMiddleware, async (req, res, next) => {\n  try {\n    const searchParams = {\n      q: req.query.q as string,\n      diets: req.query.diets ? (req.query.diets as string).split(',') : [],\n      cuisines: req.query.cuisines ? (req.query.cuisines as string).split(',') : [],\n      allergensExclude: req.query.allergens_exclude ? (req.query.allergens_exclude as string).split(',') : [],\n      calMin: req.query.cal_min ? parseInt(req.query.cal_min as string) : undefined,\n      calMax: req.query.cal_max ? parseInt(req.query.cal_max as string) : undefined,\n      proteinMin: req.query.protein_min ? parseFloat(req.query.protein_min as string) : undefined,\n      sugarMax: req.query.sugar_max ? parseFloat(req.query.sugar_max as string) : undefined,\n      sodiumMax: req.query.sodium_max ? parseInt(req.query.sodium_max as string) : undefined,\n      fiberMin: req.query.fiber_min ? parseFloat(req.query.fiber_min as string) : undefined,\n      satfatMax: req.query.satfat_max ? parseFloat(req.query.satfat_max as string) : undefined,\n      timeMax: req.query.time_max ? parseInt(req.query.time_max as string) : undefined,\n      difficulty: req.query.difficulty as string,\n      mealType: req.query.meal_type as string,\n      limit: req.query.limit ? parseInt(req.query.limit as string) : 50,\n      offset: req.query.offset ? parseInt(req.query.offset as string) : 0,\n    };\n    \n    const results = await searchRecipes(searchParams);\n    res.json(results);\n  } catch (error) {\n    next(error);\n  }\n});\n\nrouter.get(\"/popular\", rateLimitMiddleware, async (req, res, next) => {\n  try {\n    const limit = req.query.limit ? parseInt(req.query.limit as string) : 20;\n    const results = await getPopularRecipes(limit);\n    res.json(results);\n  } catch (error) {\n    next(error);\n  }\n});\n\nrouter.get(\"/:id\", rateLimitMiddleware, async (req, res, next) => {\n  try {\n    const recipe = await getRecipeDetail(req.params.id);\n    res.json(recipe);\n  } catch (error) {\n    next(error);\n  }\n});\n\n// User interactions (require auth)\nrouter.post(\"/:id/save\", authMiddleware, rateLimitMiddleware, async (req, res, next) => {\n  try {\n    const result = await toggleSaveRecipe(req.user.effectiveUserId, req.params.id);\n    res.json(result);\n  } catch (error) {\n    next(error);\n  }\n});\n\nrouter.post(\"/:id/report\", authMiddleware, rateLimitMiddleware, async (req, res, next) => {\n  try {\n    const reportData = insertRecipeReportSchema.parse({\n      ...req.body,\n      reporterUserId: req.user.effectiveUserId,\n      recipeId: req.params.id,\n    });\n    \n    const report = await db.insert(recipeReports).values(reportData).returning();\n    res.status(201).json(report[0]);\n  } catch (error) {\n    next(error);\n  }\n});\n\n// Shared recipe access (no auth required)\nrouter.get(\"/r/:shareSlug\", rateLimitMiddleware, async (req, res, next) => {\n  try {\n    const recipe = await getSharedRecipe(req.params.shareSlug);\n    res.json(recipe);\n  } catch (error) {\n    next(error);\n  }\n});\n\nexport default router;\n","size_bytes":3647},"server/routes/user.ts":{"content":"import { Router } from \"express\";\nimport { z } from \"zod\";\nimport { authMiddleware } from \"../middleware/auth\";\nimport { rateLimitMiddleware } from \"../middleware/rateLimit\";\nimport { getSavedRecipes, logRecipeHistory, getRecipeHistory, getRecentlyViewed, getMostCooked } from \"../services/recipes\";\nimport { createUserRecipe, updateUserRecipe, shareUserRecipe, unshareUserRecipe, submitForReview, getUserRecipes } from \"../services/userContent\";\nimport { getUserProfile, createOrUpdateUserProfile } from \"../services/feed\";\nimport { insertRecipeHistorySchema, insertUserRecipeSchema, insertUserProfileSchema } from \"@shared/schema\";\n\nconst router = Router();\n\n// User profile\nrouter.get(\"/profile\", authMiddleware, rateLimitMiddleware, async (req, res, next) => {\n  try {\n    const profile = await getUserProfile(req.user.effectiveUserId);\n    res.json(profile);\n  } catch (error) {\n    next(error);\n  }\n});\n\nrouter.put(\"/profile\", authMiddleware, rateLimitMiddleware, async (req, res, next) => {\n  try {\n    const profileData = insertUserProfileSchema.parse(req.body);\n    const profile = await createOrUpdateUserProfile(req.user.effectiveUserId, profileData);\n    res.json(profile);\n  } catch (error) {\n    next(error);\n  }\n});\n\n// Saved recipes\nrouter.get(\"/saved\", authMiddleware, rateLimitMiddleware, async (req, res, next) => {\n  try {\n    const limit = req.query.limit ? parseInt(req.query.limit as string) : 50;\n    const offset = req.query.offset ? parseInt(req.query.offset as string) : 0;\n    \n    const saved = await getSavedRecipes(req.user.effectiveUserId, limit, offset);\n    res.json(saved);\n  } catch (error) {\n    next(error);\n  }\n});\n\n// Recipe history\nrouter.post(\"/history\", authMiddleware, rateLimitMiddleware, async (req, res, next) => {\n  try {\n    const historyData = insertRecipeHistorySchema.parse({\n      ...req.body,\n      userId: req.user.effectiveUserId,\n    });\n    \n    await logRecipeHistory(historyData);\n    res.status(201).json({ success: true });\n  } catch (error) {\n    next(error);\n  }\n});\n\nrouter.get(\"/history\", authMiddleware, rateLimitMiddleware, async (req, res, next) => {\n  try {\n    const event = req.query.event as string;\n    const limit = req.query.limit ? parseInt(req.query.limit as string) : 50;\n    const offset = req.query.offset ? parseInt(req.query.offset as string) : 0;\n    \n    const history = await getRecipeHistory(req.user.effectiveUserId, event, limit, offset);\n    res.json(history);\n  } catch (error) {\n    next(error);\n  }\n});\n\nrouter.get(\"/recently-viewed\", authMiddleware, rateLimitMiddleware, async (req, res, next) => {\n  try {\n    const limit = req.query.limit ? parseInt(req.query.limit as string) : 20;\n    const recent = await getRecentlyViewed(req.user.effectiveUserId, limit);\n    res.json(recent);\n  } catch (error) {\n    next(error);\n  }\n});\n\nrouter.get(\"/most-cooked\", authMiddleware, rateLimitMiddleware, async (req, res, next) => {\n  try {\n    const limit = req.query.limit ? parseInt(req.query.limit as string) : 20;\n    const cooked = await getMostCooked(req.user.effectiveUserId, limit);\n    res.json(cooked);\n  } catch (error) {\n    next(error);\n  }\n});\n\n// User-generated recipes\nrouter.post(\"/my-recipes\", authMiddleware, rateLimitMiddleware, async (req, res, next) => {\n  try {\n    const recipeData = insertUserRecipeSchema.parse(req.body);\n    const recipe = await createUserRecipe(req.user.effectiveUserId, recipeData);\n    res.status(201).json(recipe);\n  } catch (error) {\n    next(error);\n  }\n});\n\nrouter.get(\"/my-recipes\", authMiddleware, rateLimitMiddleware, async (req, res, next) => {\n  try {\n    const limit = req.query.limit ? parseInt(req.query.limit as string) : 50;\n    const offset = req.query.offset ? parseInt(req.query.offset as string) : 0;\n    \n    const recipes = await getUserRecipes(req.user.effectiveUserId, limit, offset);\n    res.json(recipes);\n  } catch (error) {\n    next(error);\n  }\n});\n\nrouter.patch(\"/my-recipes/:id\", authMiddleware, rateLimitMiddleware, async (req, res, next) => {\n  try {\n    const updates = insertUserRecipeSchema.partial().parse(req.body);\n    const recipe = await updateUserRecipe(req.user.effectiveUserId, req.params.id, updates);\n    res.json(recipe);\n  } catch (error) {\n    next(error);\n  }\n});\n\nrouter.post(\"/my-recipes/:id/share\", authMiddleware, rateLimitMiddleware, async (req, res, next) => {\n  try {\n    const result = await shareUserRecipe(req.user.effectiveUserId, req.params.id);\n    res.json(result);\n  } catch (error) {\n    next(error);\n  }\n});\n\nrouter.post(\"/my-recipes/:id/unshare\", authMiddleware, rateLimitMiddleware, async (req, res, next) => {\n  try {\n    const recipe = await unshareUserRecipe(req.user.effectiveUserId, req.params.id);\n    res.json(recipe);\n  } catch (error) {\n    next(error);\n  }\n});\n\nrouter.post(\"/my-recipes/:id/submit\", authMiddleware, rateLimitMiddleware, async (req, res, next) => {\n  try {\n    const recipe = await submitForReview(req.user.effectiveUserId, req.params.id);\n    res.json(recipe);\n  } catch (error) {\n    next(error);\n  }\n});\n\nexport default router;\n","size_bytes":5054},"server/services/admin.ts":{"content":"import { db, executeRaw } from \"../config/database\";\nimport { recipes, userRecipes, recipeReports, recipeReportResolutions, auditLog } from \"@shared/schema\";\nimport { eq, desc, and } from \"drizzle-orm\";\nimport type { InsertRecipe } from \"@shared/schema\";\nimport { auditLogEntry } from \"../middleware/audit\";\n\nexport async function createCuratedRecipe(adminUserId: string, recipeData: InsertRecipe, reason?: string) {\n  const recipe = await db.insert(recipes).values({\n    ...recipeData,\n    status: 'published',\n    publishedAt: new Date(),\n  }).returning();\n  \n  await auditLogEntry(\n    adminUserId,\n    'CREATE_CURATED_RECIPE',\n    'recipes',\n    recipe[0].id,\n    null,\n    recipe[0],\n    reason\n  );\n  \n  return recipe[0];\n}\n\nexport async function updateCuratedRecipe(\n  adminUserId: string,\n  recipeId: string,\n  updates: Partial<InsertRecipe>,\n  reason?: string\n) {\n  // Get before state\n  const before = await db\n    .select()\n    .from(recipes)\n    .where(eq(recipes.id, recipeId))\n    .limit(1);\n  \n  if (before.length === 0) {\n    throw new Error(\"Recipe not found\");\n  }\n  \n  const updated = await db\n    .update(recipes)\n    .set({\n      ...updates,\n      updatedAt: new Date(),\n    })\n    .where(eq(recipes.id, recipeId))\n    .returning();\n  \n  await auditLogEntry(\n    adminUserId,\n    'UPDATE_CURATED_RECIPE',\n    'recipes',\n    recipeId,\n    before[0],\n    updated[0],\n    reason\n  );\n  \n  return updated[0];\n}\n\nexport async function deleteCuratedRecipe(adminUserId: string, recipeId: string, reason: string) {\n  // Get before state\n  const before = await db\n    .select()\n    .from(recipes)\n    .where(eq(recipes.id, recipeId))\n    .limit(1);\n  \n  if (before.length === 0) {\n    throw new Error(\"Recipe not found\");\n  }\n  \n  await db.delete(recipes).where(eq(recipes.id, recipeId));\n  \n  await auditLogEntry(\n    adminUserId,\n    'DELETE_CURATED_RECIPE',\n    'recipes',\n    recipeId,\n    before[0],\n    null,\n    reason\n  );\n  \n  return { success: true };\n}\n\nexport async function getReports(status?: string, limit: number = 50, offset: number = 0) {\n  let query = db\n    .select({\n      report: recipeReports,\n      recipe: recipes,\n      userRecipe: userRecipes,\n    })\n    .from(recipeReports)\n    .leftJoin(recipes, eq(recipeReports.recipeId, recipes.id))\n    .leftJoin(userRecipes, eq(recipeReports.userRecipeId, userRecipes.id));\n  \n  if (status) {\n    query = query.where(eq(recipeReports.status, status));\n  }\n  \n  const results = await query\n    .orderBy(desc(recipeReports.createdAt))\n    .limit(limit)\n    .offset(offset);\n  \n  return results;\n}\n\nexport async function resolveReport(\n  adminUserId: string,\n  reportId: string,\n  action: string,\n  reason: string,\n  notes?: string\n) {\n  // Update report status\n  await db\n    .update(recipeReports)\n    .set({\n      status: 'resolved',\n      updatedAt: new Date(),\n    })\n    .where(eq(recipeReports.id, reportId));\n  \n  // Create resolution record\n  const resolution = await db.insert(recipeReportResolutions).values({\n    reportId,\n    resolvedBy: adminUserId,\n    action,\n    reason,\n    notes,\n  }).returning();\n  \n  await auditLogEntry(\n    adminUserId,\n    'RESOLVE_REPORT',\n    'recipe_reports',\n    reportId,\n    null,\n    { action, reason, notes }\n  );\n  \n  return resolution[0];\n}\n\nexport async function getAuditLog(limit: number = 100, offset: number = 0, actorUserId?: string) {\n  let query = db.select().from(auditLog);\n  \n  if (actorUserId) {\n    query = query.where(eq(auditLog.actorUserId, actorUserId));\n  }\n  \n  const logs = await query\n    .orderBy(desc(auditLog.at))\n    .limit(limit)\n    .offset(offset);\n  \n  return logs;\n}\n\nexport async function auditImpersonation(\n  adminUserId: string,\n  targetUserId: string,\n  url: string,\n  ip?: string,\n  userAgent?: string\n) {\n  await auditLogEntry(\n    adminUserId,\n    'USER_IMPERSONATION',\n    'users',\n    targetUserId,\n    null,\n    { url, ip, userAgent },\n    'Admin impersonation for support/debugging'\n  );\n}\n\nexport async function refreshMaterializedViews(): Promise<{ success: boolean; duration: number }> {\n  const start = Date.now();\n  \n  try {\n    await executeRaw('REFRESH MATERIALIZED VIEW CONCURRENTLY mv_recipe_popularity_30d');\n    const duration = Date.now() - start;\n    \n    return { success: true, duration };\n  } catch (error) {\n    console.error(\"Failed to refresh materialized views:\", error);\n    throw new Error(\"Materialized view refresh failed\");\n  }\n}\n\nexport async function getDashboardStats() {\n  try {\n    const [totalRecipes, activeUsers, searchQps, pendingReview] = await Promise.all([\n      db.select().from(recipes).where(eq(recipes.status, 'published')),\n      executeRaw('SELECT COUNT(DISTINCT user_id) as count FROM recipe_history WHERE at > NOW() - INTERVAL \\'30 days\\''),\n      executeRaw('SELECT COUNT(*) as count FROM recipe_history WHERE event = \\'viewed\\' AND at > NOW() - INTERVAL \\'1 minute\\''),\n      db.select().from(userRecipes).where(eq(userRecipes.reviewStatus, 'pending')),\n    ]);\n    \n    return {\n      totalRecipes: totalRecipes.length,\n      activeUsers: activeUsers[0]?.count || 0,\n      searchQps: searchQps[0]?.count || 0,\n      pendingReview: pendingReview.length,\n    };\n  } catch (error) {\n    console.error(\"Dashboard stats error:\", error);\n    throw new Error(\"Failed to get dashboard stats\");\n  }\n}\n","size_bytes":5309},"server/services/feed.ts":{"content":"import { db, executeRaw } from \"../config/database\";\nimport { userProfiles, recipes } from \"@shared/schema\";\nimport { eq } from \"drizzle-orm\";\n\nexport interface FeedResult {\n  recipe: any;\n  score: number;\n  reasons: string[];\n}\n\nexport async function getPersonalizedFeed(\n  userId: string,\n  limit: number = 50,\n  offset: number = 0\n): Promise<FeedResult[]> {\n  try {\n    const results = await executeRaw(`\n      SELECT * FROM personalized_feed($1, $2, $3)\n    `, [userId, limit, offset]);\n    \n    return results.map((row: any) => ({\n      recipe: row.recipe,\n      score: parseFloat(row.score),\n      reasons: row.reasons || []\n    }));\n  } catch (error) {\n    console.error(\"Personalized feed error:\", error);\n    throw new Error(\"Failed to generate personalized feed\");\n  }\n}\n\nexport async function getUserProfile(userId: string) {\n  const profile = await db\n    .select()\n    .from(userProfiles)\n    .where(eq(userProfiles.userId, userId))\n    .limit(1);\n  \n  return profile[0] || null;\n}\n\nexport async function createOrUpdateUserProfile(userId: string, profileData: any) {\n  const existing = await getUserProfile(userId);\n  \n  if (existing) {\n    await db\n      .update(userProfiles)\n      .set({\n        ...profileData,\n        updatedAt: new Date(),\n      })\n      .where(eq(userProfiles.userId, userId));\n  } else {\n    await db.insert(userProfiles).values({\n      userId,\n      ...profileData,\n    });\n  }\n  \n  return getUserProfile(userId);\n}\n\nexport async function getFeedRecommendations(userId: string): Promise<{\n  trending: any[];\n  forYou: FeedResult[];\n  recent: any[];\n}> {\n  try {\n    // Get trending recipes (popular in last 7 days)\n    const trending = await executeRaw(`\n      SELECT r.*, COUNT(rh.id) as recent_activity\n      FROM recipes r\n      LEFT JOIN recipe_history rh ON r.id = rh.recipe_id \n        AND rh.event = 'cooked' \n        AND rh.at > NOW() - INTERVAL '7 days'\n      WHERE r.status = 'published' AND r.market_country = 'US'\n      GROUP BY r.id\n      ORDER BY recent_activity DESC, r.updated_at DESC\n      LIMIT 10\n    `);\n    \n    // Get personalized recommendations\n    const forYou = await getPersonalizedFeed(userId, 20);\n    \n    // Get recently published recipes\n    const recent = await db\n      .select()\n      .from(recipes)\n      .where(eq(recipes.status, \"published\"))\n      .orderBy(recipes.publishedAt)\n      .limit(10);\n    \n    return {\n      trending,\n      forYou,\n      recent,\n    };\n  } catch (error) {\n    console.error(\"Feed recommendations error:\", error);\n    throw new Error(\"Failed to get feed recommendations\");\n  }\n}\n","size_bytes":2585},"server/services/recipes.ts":{"content":"import { db } from \"../config/database\";\nimport { recipes, savedRecipes, recipeHistory, userRecipes } from \"@shared/schema\";\nimport { eq, and, desc } from \"drizzle-orm\";\nimport type { InsertRecipeHistory } from \"@shared/schema\";\n\nexport async function toggleSaveRecipe(userId: string, recipeId: string): Promise<{ saved: boolean }> {\n  // Check if already saved\n  const existing = await db\n    .select()\n    .from(savedRecipes)\n    .where(and(\n      eq(savedRecipes.userId, userId),\n      eq(savedRecipes.recipeId, recipeId)\n    ))\n    .limit(1);\n  \n  if (existing.length > 0) {\n    // Remove save\n    await db\n      .delete(savedRecipes)\n      .where(and(\n        eq(savedRecipes.userId, userId),\n        eq(savedRecipes.recipeId, recipeId)\n      ));\n    return { saved: false };\n  } else {\n    // Add save\n    await db.insert(savedRecipes).values({\n      userId,\n      recipeId,\n    });\n    return { saved: true };\n  }\n}\n\nexport async function getSavedRecipes(userId: string, limit: number = 50, offset: number = 0) {\n  const saved = await db\n    .select({\n      recipe: recipes,\n      savedAt: savedRecipes.savedAt,\n    })\n    .from(savedRecipes)\n    .innerJoin(recipes, eq(savedRecipes.recipeId, recipes.id))\n    .where(eq(savedRecipes.userId, userId))\n    .orderBy(desc(savedRecipes.savedAt))\n    .limit(limit)\n    .offset(offset);\n  \n  return saved;\n}\n\nexport async function logRecipeHistory(historyData: InsertRecipeHistory): Promise<void> {\n  // Check for throttling on 'viewed' events (max 1 per hour per recipe/user)\n  if (historyData.event === 'viewed') {\n    const recentView = await db\n      .select()\n      .from(recipeHistory)\n      .where(and(\n        eq(recipeHistory.userId, historyData.userId),\n        eq(recipeHistory.recipeId, historyData.recipeId),\n        eq(recipeHistory.event, 'viewed')\n      ))\n      .orderBy(desc(recipeHistory.at))\n      .limit(1);\n    \n    if (recentView.length > 0) {\n      const hourAgo = new Date(Date.now() - 60 * 60 * 1000);\n      if (recentView[0].at > hourAgo) {\n        // Skip logging - too recent\n        return;\n      }\n    }\n  }\n  \n  await db.insert(recipeHistory).values(historyData);\n}\n\nexport async function getRecipeHistory(\n  userId: string,\n  event?: string,\n  limit: number = 50,\n  offset: number = 0\n) {\n  let query = db\n    .select({\n      history: recipeHistory,\n      recipe: recipes,\n    })\n    .from(recipeHistory)\n    .innerJoin(recipes, eq(recipeHistory.recipeId, recipes.id))\n    .where(eq(recipeHistory.userId, userId));\n  \n  if (event) {\n    query = query.where(and(\n      eq(recipeHistory.userId, userId),\n      eq(recipeHistory.event, event)\n    ));\n  }\n  \n  const results = await query\n    .orderBy(desc(recipeHistory.at))\n    .limit(limit)\n    .offset(offset);\n  \n  return results;\n}\n\nexport async function getRecentlyViewed(userId: string, limit: number = 20) {\n  return getRecipeHistory(userId, 'viewed', limit);\n}\n\nexport async function getMostCooked(userId: string, limit: number = 20) {\n  const results = await db\n    .select({\n      recipe: recipes,\n      cookCount: recipeHistory.id, // Will be aggregated\n    })\n    .from(recipeHistory)\n    .innerJoin(recipes, eq(recipeHistory.recipeId, recipes.id))\n    .where(and(\n      eq(recipeHistory.userId, userId),\n      eq(recipeHistory.event, 'cooked')\n    ))\n    .groupBy(recipes.id)\n    .orderBy(desc(recipeHistory.id))\n    .limit(limit);\n  \n  return results;\n}\n\nexport async function getSharedRecipe(shareSlug: string) {\n  const shared = await db\n    .select()\n    .from(userRecipes)\n    .where(and(\n      eq(userRecipes.shareSlug, shareSlug),\n      eq(userRecipes.visibility, 'shared')\n    ))\n    .limit(1);\n  \n  if (shared.length === 0) {\n    throw new Error(\"Shared recipe not found\");\n  }\n  \n  return shared[0];\n}\n","size_bytes":3755},"server/services/search.ts":{"content":"import { db, executeRaw } from \"../config/database\";\nimport { recipes } from \"@shared/schema\";\nimport { eq, and, sql } from \"drizzle-orm\";\n\nexport interface SearchParams {\n  q?: string;\n  diets?: string[];\n  cuisines?: string[];\n  allergensExclude?: string[];\n  calMin?: number;\n  calMax?: number;\n  proteinMin?: number;\n  sugarMax?: number;\n  sodiumMax?: number;\n  fiberMin?: number;\n  satfatMax?: number;\n  timeMax?: number;\n  difficulty?: string;\n  mealType?: string;\n  limit?: number;\n  offset?: number;\n}\n\nexport interface SearchResult {\n  recipe: any;\n  score: number;\n  reasons: string[];\n}\n\nexport async function searchRecipes(params: SearchParams): Promise<SearchResult[]> {\n  const {\n    q,\n    diets = [],\n    cuisines = [],\n    allergensExclude = [],\n    calMin,\n    calMax,\n    proteinMin,\n    sugarMax,\n    sodiumMax,\n    fiberMin,\n    satfatMax,\n    timeMax,\n    difficulty,\n    mealType,\n    limit = 50,\n    offset = 0\n  } = params;\n  \n  try {\n    const results = await executeRaw(`\n      SELECT * FROM search_recipes(\n        $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16\n      )\n    `, [\n      q || null,\n      diets,\n      cuisines,\n      allergensExclude,\n      calMin || null,\n      calMax || null,\n      proteinMin || null,\n      sugarMax || null,\n      sodiumMax || null,\n      fiberMin || null,\n      satfatMax || null,\n      timeMax || null,\n      difficulty || null,\n      mealType || null,\n      limit,\n      offset\n    ]);\n    \n    return results.map((row: any) => ({\n      recipe: row.recipe,\n      score: parseFloat(row.score),\n      reasons: row.reasons || []\n    }));\n  } catch (error) {\n    console.error(\"Search error:\", error);\n    throw new Error(\"Recipe search failed\");\n  }\n}\n\nexport async function getRecipeDetail(id: string): Promise<any> {\n  const recipe = await db\n    .select()\n    .from(recipes)\n    .where(and(\n      eq(recipes.id, id),\n      eq(recipes.status, \"published\"),\n      eq(recipes.marketCountry, \"US\")\n    ))\n    .limit(1);\n  \n  if (recipe.length === 0) {\n    throw new Error(\"Recipe not found\");\n  }\n  \n  return recipe[0];\n}\n\nexport async function getPopularRecipes(limit: number = 20): Promise<any[]> {\n  try {\n    const results = await executeRaw(`\n      SELECT r.*, COALESCE(mv.cooked_30d, 0) as popularity_score\n      FROM recipes r\n      LEFT JOIN mv_recipe_popularity_30d mv ON r.id = mv.recipe_id\n      WHERE r.status = 'published' AND r.market_country = 'US'\n      ORDER BY mv.cooked_30d DESC NULLS LAST, r.updated_at DESC\n      LIMIT $1\n    `, [limit]);\n    \n    return results;\n  } catch (error) {\n    console.error(\"Popular recipes error:\", error);\n    throw new Error(\"Failed to fetch popular recipes\");\n  }\n}\n","size_bytes":2704},"server/services/userContent.ts":{"content":"import { db } from \"../config/database\";\nimport { userRecipes, recipes } from \"@shared/schema\";\nimport { eq, and } from \"drizzle-orm\";\nimport type { InsertUserRecipe } from \"@shared/schema\";\nimport { randomBytes } from \"crypto\";\n\nexport async function createUserRecipe(userId: string, recipeData: InsertUserRecipe) {\n  const recipe = await db.insert(userRecipes).values({\n    ...recipeData,\n    ownerUserId: userId,\n  }).returning();\n  \n  return recipe[0];\n}\n\nexport async function updateUserRecipe(userId: string, recipeId: string, updates: Partial<InsertUserRecipe>) {\n  const updated = await db\n    .update(userRecipes)\n    .set({\n      ...updates,\n      updatedAt: new Date(),\n    })\n    .where(and(\n      eq(userRecipes.id, recipeId),\n      eq(userRecipes.ownerUserId, userId)\n    ))\n    .returning();\n  \n  if (updated.length === 0) {\n    throw new Error(\"Recipe not found or access denied\");\n  }\n  \n  return updated[0];\n}\n\nexport async function shareUserRecipe(userId: string, recipeId: string): Promise<{ shareSlug: string }> {\n  // Generate unique share slug\n  const shareSlug = randomBytes(8).toString('hex');\n  \n  const updated = await db\n    .update(userRecipes)\n    .set({\n      visibility: 'shared',\n      shareSlug,\n      updatedAt: new Date(),\n    })\n    .where(and(\n      eq(userRecipes.id, recipeId),\n      eq(userRecipes.ownerUserId, userId)\n    ))\n    .returning();\n  \n  if (updated.length === 0) {\n    throw new Error(\"Recipe not found or access denied\");\n  }\n  \n  return { shareSlug };\n}\n\nexport async function unshareUserRecipe(userId: string, recipeId: string) {\n  const updated = await db\n    .update(userRecipes)\n    .set({\n      visibility: 'private',\n      shareSlug: null,\n      updatedAt: new Date(),\n    })\n    .where(and(\n      eq(userRecipes.id, recipeId),\n      eq(userRecipes.ownerUserId, userId)\n    ))\n    .returning();\n  \n  if (updated.length === 0) {\n    throw new Error(\"Recipe not found or access denied\");\n  }\n  \n  return updated[0];\n}\n\nexport async function submitForReview(userId: string, recipeId: string) {\n  const updated = await db\n    .update(userRecipes)\n    .set({\n      visibility: 'submitted',\n      submittedAt: new Date(),\n      reviewStatus: 'pending',\n      updatedAt: new Date(),\n    })\n    .where(and(\n      eq(userRecipes.id, recipeId),\n      eq(userRecipes.ownerUserId, userId)\n    ))\n    .returning();\n  \n  if (updated.length === 0) {\n    throw new Error(\"Recipe not found or access denied\");\n  }\n  \n  return updated[0];\n}\n\nexport async function getUserRecipes(userId: string, limit: number = 50, offset: number = 0) {\n  const userRecipesList = await db\n    .select()\n    .from(userRecipes)\n    .where(eq(userRecipes.ownerUserId, userId))\n    .orderBy(userRecipes.updatedAt)\n    .limit(limit)\n    .offset(offset);\n  \n  return userRecipesList;\n}\n\nexport async function approveUserRecipe(adminUserId: string, userRecipeId: string, reviewNotes?: string) {\n  // Get the user recipe\n  const userRecipe = await db\n    .select()\n    .from(userRecipes)\n    .where(eq(userRecipes.id, userRecipeId))\n    .limit(1);\n  \n  if (userRecipe.length === 0) {\n    throw new Error(\"User recipe not found\");\n  }\n  \n  const recipe = userRecipe[0];\n  \n  // Create a new curated recipe\n  const curatedRecipe = await db.insert(recipes).values({\n    title: recipe.title,\n    description: recipe.description,\n    imageUrl: recipe.imageUrl,\n    calories: recipe.calories,\n    proteinG: recipe.proteinG,\n    carbsG: recipe.carbsG,\n    fatG: recipe.fatG,\n    fiberG: recipe.fiberG,\n    sugarG: recipe.sugarG,\n    sodiumMg: recipe.sodiumMg,\n    saturatedFatG: recipe.saturatedFatG,\n    totalTimeMinutes: recipe.totalTimeMinutes,\n    prepTimeMinutes: recipe.prepTimeMinutes,\n    cookTimeMinutes: recipe.cookTimeMinutes,\n    servings: recipe.servings,\n    difficulty: recipe.difficulty,\n    mealType: recipe.mealType,\n    cuisines: recipe.cuisines,\n    dietTags: recipe.dietTags,\n    allergens: recipe.allergens,\n    flags: recipe.flags,\n    ingredients: recipe.ingredients,\n    instructions: recipe.instructions,\n    notes: recipe.notes,\n    status: 'published',\n    sourceType: 'user_generated',\n    sourceUserId: recipe.ownerUserId,\n    publishedAt: new Date(),\n  }).returning();\n  \n  // Update user recipe status\n  await db\n    .update(userRecipes)\n    .set({\n      reviewStatus: 'approved',\n      reviewedBy: adminUserId,\n      reviewedAt: new Date(),\n      reviewNotes,\n      approvedRecipeId: curatedRecipe[0].id,\n    })\n    .where(eq(userRecipes.id, userRecipeId));\n  \n  return curatedRecipe[0];\n}\n\nexport async function rejectUserRecipe(adminUserId: string, userRecipeId: string, reviewNotes: string) {\n  const updated = await db\n    .update(userRecipes)\n    .set({\n      reviewStatus: 'rejected',\n      reviewedBy: adminUserId,\n      reviewedAt: new Date(),\n      reviewNotes,\n      visibility: 'private', // Reset to private\n    })\n    .where(eq(userRecipes.id, userRecipeId))\n    .returning();\n  \n  if (updated.length === 0) {\n    throw new Error(\"User recipe not found\");\n  }\n  \n  return updated[0];\n}\n","size_bytes":5043},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/admin-dashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Sidebar } from \"@/components/admin/Sidebar\";\nimport { TopBar } from \"@/components/admin/TopBar\";\nimport { DashboardStats } from \"@/components/admin/DashboardStats\";\nimport { AuditLogTable } from \"@/components/admin/AuditLogTable\";\nimport { ModerationQueue } from \"@/components/admin/ModerationQueue\";\nimport { Button } from \"@/components/ui/button\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Activity, \n  Database, \n  RefreshCw, \n  Shield, \n  AlertCircle,\n  CheckCircle,\n  Clock\n} from \"lucide-react\";\nimport { useState } from \"react\";\n\nexport default function AdminDashboard() {\n  const [refreshing, setRefreshing] = useState(false);\n\n  const { data: dashboardStats, isLoading: statsLoading } = useQuery({\n    queryKey: [\"/api/v1/admin/dashboard\"],\n    refetchInterval: 30000, // Refresh every 30 seconds\n  });\n\n  const { data: auditLogs, isLoading: auditLoading } = useQuery({\n    queryKey: [\"/api/v1/admin/audit\"],\n    enabled: true,\n  });\n\n  const { data: reports, isLoading: reportsLoading } = useQuery({\n    queryKey: [\"/api/v1/admin/reports\"],\n    enabled: true,\n  });\n\n  const handleRefreshMaterializedViews = async () => {\n    setRefreshing(true);\n    try {\n      const response = await fetch(\"/api/v1/admin/refresh-materialized-views\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      });\n      if (response.ok) {\n        // Refetch dashboard data\n        window.location.reload();\n      }\n    } catch (error) {\n      console.error(\"Failed to refresh materialized views:\", error);\n    } finally {\n      setRefreshing(false);\n    }\n  };\n\n  if (statsLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <RefreshCw className=\"h-8 w-8 animate-spin mx-auto mb-4 text-primary\" />\n          <p className=\"text-gray-600\">Loading admin dashboard...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen flex bg-gray-50\">\n      <Sidebar />\n      \n      <main className=\"flex-1 flex flex-col min-w-0\">\n        <TopBar />\n        \n        <div className=\"flex-1 p-6 overflow-auto scrollbar-thin\">\n          {/* System Status Cards */}\n          <DashboardStats stats={dashboardStats} />\n          \n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8\">\n            {/* Search Performance Analytics */}\n            <Card>\n              <CardHeader className=\"border-b border-gray-200\">\n                <div className=\"flex items-center justify-between\">\n                  <CardTitle className=\"text-lg font-semibold text-gray-900\">\n                    Search Performance\n                  </CardTitle>\n                  <div className=\"flex items-center space-x-2\">\n                    <span className=\"text-sm text-gray-500\">Real-time</span>\n                    <div className=\"w-2 h-2 bg-green-500 rounded-full\" />\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent className=\"p-6\">\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm text-gray-600\">FTS Query Performance</span>\n                    <span className=\"text-sm font-medium text-gray-900 font-mono\">avg 23ms</span>\n                  </div>\n                  <Progress value={85} className=\"h-2\" />\n                  \n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm text-gray-600\">Materialized View Refresh</span>\n                    <span className=\"text-sm font-medium text-gray-900 font-mono\">2m 14s ago</span>\n                  </div>\n                  <Progress value={95} className=\"h-2\" />\n                  \n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm text-gray-600\">GIN Index Utilization</span>\n                    <span className=\"text-sm font-medium text-gray-900 font-mono\">97.3%</span>\n                  </div>\n                  <Progress value={97} className=\"h-2\" />\n                </div>\n              </CardContent>\n            </Card>\n            \n            {/* Rate Limiting Status */}\n            <Card>\n              <CardHeader className=\"border-b border-gray-200\">\n                <CardTitle className=\"text-lg font-semibold text-gray-900\">\n                  Rate Limiting Status\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"p-6\">\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between p-4 bg-green-50 rounded-lg\">\n                    <div>\n                      <p className=\"text-sm font-medium text-gray-900\">Read Operations</p>\n                      <p className=\"text-xs text-gray-600\">60 req/min limit</p>\n                    </div>\n                    <div className=\"text-right\">\n                      <p className=\"text-lg font-semibold text-green-700\">47/60</p>\n                      <p className=\"text-xs text-gray-500\">78% used</p>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-center justify-between p-4 bg-yellow-50 rounded-lg\">\n                    <div>\n                      <p className=\"text-sm font-medium text-gray-900\">Write Operations</p>\n                      <p className=\"text-xs text-gray-600\">6 req/min limit</p>\n                    </div>\n                    <div className=\"text-right\">\n                      <p className=\"text-lg font-semibold text-yellow-700\">5/6</p>\n                      <p className=\"text-xs text-gray-500\">83% used</p>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-center justify-between p-4 bg-red-50 rounded-lg\">\n                    <div>\n                      <p className=\"text-sm font-medium text-gray-900\">Blocked Requests</p>\n                      <p className=\"text-xs text-gray-600\">Last 5 minutes</p>\n                    </div>\n                    <div className=\"text-right\">\n                      <p className=\"text-lg font-semibold text-red-700\">12</p>\n                      <p className=\"text-xs text-gray-500\">429 errors</p>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n          \n          {/* Recent Audit Logs */}\n          <AuditLogTable logs={auditLogs || []} loading={auditLoading} />\n          \n          {/* Database Operations & Content Moderation */}\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {/* Database Operations */}\n            <Card>\n              <CardHeader className=\"border-b border-gray-200\">\n                <CardTitle className=\"text-lg font-semibold text-gray-900\">\n                  Database Operations\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"p-6\">\n                <div className=\"space-y-6\">\n                  <div className=\"bg-gray-50 rounded-lg p-4\">\n                    <h4 className=\"text-sm font-medium text-gray-900 mb-3\">Active Connections</h4>\n                    <div className=\"space-y-2\">\n                      <div className=\"flex justify-between text-sm\">\n                        <span className=\"text-gray-600\">Read Pool</span>\n                        <span className=\"font-mono text-gray-900\">47/100</span>\n                      </div>\n                      <div className=\"flex justify-between text-sm\">\n                        <span className=\"text-gray-600\">Write Pool</span>\n                        <span className=\"font-mono text-gray-900\">12/50</span>\n                      </div>\n                      <div className=\"flex justify-between text-sm\">\n                        <span className=\"text-gray-600\">Idle</span>\n                        <span className=\"font-mono text-gray-900\">91</span>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"bg-blue-50 rounded-lg p-4\">\n                    <h4 className=\"text-sm font-medium text-gray-900 mb-3\">RLS Policies</h4>\n                    <div className=\"space-y-2 text-sm\">\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-gray-600\">saved_recipes</span>\n                        <Badge variant=\"secondary\" className=\"bg-green-100 text-green-800\">\n                          <Shield className=\"w-3 h-3 mr-1\" />\n                          Active\n                        </Badge>\n                      </div>\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-gray-600\">recipe_history</span>\n                        <Badge variant=\"secondary\" className=\"bg-green-100 text-green-800\">\n                          <Shield className=\"w-3 h-3 mr-1\" />\n                          Active\n                        </Badge>\n                      </div>\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-gray-600\">user_recipes</span>\n                        <Badge variant=\"secondary\" className=\"bg-green-100 text-green-800\">\n                          <Shield className=\"w-3 h-3 mr-1\" />\n                          Active\n                        </Badge>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <Button\n                    className=\"w-full bg-blue-600 hover:bg-blue-700 text-white\"\n                    onClick={handleRefreshMaterializedViews}\n                    disabled={refreshing}\n                    data-testid=\"refresh-materialized-views-button\"\n                  >\n                    {refreshing ? (\n                      <RefreshCw className=\"w-4 h-4 mr-2 animate-spin\" />\n                    ) : (\n                      <RefreshCw className=\"w-4 h-4 mr-2\" />\n                    )}\n                    Refresh Materialized Views\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n            \n            {/* Content Moderation Queue */}\n            <ModerationQueue reports={reports || []} loading={reportsLoading} />\n          </div>\n          \n          {/* System Health Footer */}\n          <Card className=\"mt-8\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"flex items-center space-x-2\">\n                    <CheckCircle className=\"w-3 h-3 text-green-500\" />\n                    <span className=\"text-sm text-gray-600\">API Status: Operational</span>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <CheckCircle className=\"w-3 h-3 text-green-500\" />\n                    <span className=\"text-sm text-gray-600\">Database: Healthy</span>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <Clock className=\"w-3 h-3 text-yellow-500\" />\n                    <span className=\"text-sm text-gray-600\">Background Jobs: 3 Running</span>\n                  </div>\n                </div>\n                <div className=\"text-xs text-gray-500 font-mono\">\n                  Last updated: {new Date().toISOString().slice(0, 19).replace('T', ' ')} UTC\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":11954},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/admin/AuditLogTable.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { ShieldQuestion, UserCheck2, CheckCircle } from \"lucide-react\";\nimport { formatDistanceToNow } from \"date-fns\";\n\ninterface AuditLogTableProps {\n  logs: any[];\n  loading: boolean;\n}\n\nexport function AuditLogTable({ logs, loading }: AuditLogTableProps) {\n  if (loading) {\n    return (\n      <Card className=\"mb-8\">\n        <CardContent className=\"p-6\">\n          <div className=\"animate-pulse space-y-4\">\n            <div className=\"h-4 bg-gray-200 rounded w-1/4\"></div>\n            <div className=\"space-y-2\">\n              {[...Array(5)].map((_, i) => (\n                <div key={i} className=\"h-12 bg-gray-200 rounded\"></div>\n              ))}\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  const getActionBadgeColor = (action: string) => {\n    if (action.includes(\"CREATE\") || action.includes(\"APPROVE\")) return \"bg-green-100 text-green-800\";\n    if (action.includes(\"UPDATE\")) return \"bg-blue-100 text-blue-800\";\n    if (action.includes(\"DELETE\") || action.includes(\"REJECT\")) return \"bg-red-100 text-red-800\";\n    if (action.includes(\"IMPERSONATION\")) return \"bg-yellow-100 text-yellow-800\";\n    return \"bg-gray-100 text-gray-800\";\n  };\n\n  const getActorIcon = (action: string) => {\n    if (action.includes(\"IMPERSONATION\")) return UserCheck2;\n    return ShieldQuestion;\n  };\n\n  return (\n    <Card className=\"mb-8\">\n      <CardHeader className=\"border-b border-gray-200\">\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"text-lg font-semibold text-gray-900\">\n            Recent Audit Logs\n          </CardTitle>\n          <Button \n            variant=\"ghost\" \n            className=\"text-sm text-blue-600 hover:text-blue-700 font-medium\"\n            data-testid=\"view-all-audit-logs-button\"\n          >\n            View All\n          </Button>\n        </div>\n      </CardHeader>\n      <CardContent className=\"p-0\">\n        <div className=\"overflow-hidden\">\n          <table className=\"min-w-full divide-y divide-gray-200\">\n            <thead className=\"bg-gray-50\">\n              <tr>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Timestamp\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Actor\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Action\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Target\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Status\n                </th>\n              </tr>\n            </thead>\n            <tbody className=\"bg-white divide-y divide-gray-200\">\n              {!logs || logs.length === 0 ? (\n                <tr>\n                  <td colSpan={5} className=\"px-6 py-8 text-center text-gray-500\">\n                    No audit logs available\n                  </td>\n                </tr>\n              ) : (\n                logs.slice(0, 10).map((log) => {\n                  const ActorIcon = getActorIcon(log.action);\n                  \n                  return (\n                    <tr key={log.id} className=\"hover:bg-gray-50\" data-testid={`audit-log-${log.id}`}>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900 font-mono\">\n                        {log.at ? new Date(log.at).toLocaleString() : \"N/A\"}\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap\">\n                        <div className=\"flex items-center\">\n                          <div className=\"w-6 h-6 bg-blue-600 rounded-full flex items-center justify-center mr-3\">\n                            <ActorIcon className=\"text-white text-xs\" />\n                          </div>\n                          <span className=\"text-sm text-gray-900\">\n                            {log.actorUserId || \"System\"}\n                          </span>\n                        </div>\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap\">\n                        <Badge \n                          className={`text-xs font-medium ${getActionBadgeColor(log.action)}`}\n                          variant=\"secondary\"\n                        >\n                          {log.action}\n                        </Badge>\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-600 font-mono\">\n                        {log.targetTable}:{log.targetId}\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap\">\n                        <Badge \n                          variant=\"secondary\"\n                          className=\"bg-green-100 text-green-800\"\n                        >\n                          <CheckCircle className=\"w-3 h-3 mr-1\" />\n                          Success\n                        </Badge>\n                      </td>\n                    </tr>\n                  );\n                })\n              )}\n            </tbody>\n          </table>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":5578},"client/src/components/admin/DashboardStats.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { BookOpen, Users, Search, AlertTriangle } from \"lucide-react\";\n\ninterface DashboardStatsProps {\n  stats: any;\n}\n\nexport function DashboardStats({ stats }: DashboardStatsProps) {\n  const statsCards = [\n    {\n      title: \"Total Recipes\",\n      value: stats?.totalRecipes?.toLocaleString() || \"12,847\",\n      change: \"+127 this week\",\n      changeType: \"positive\",\n      icon: BookOpen,\n      bgColor: \"bg-blue-100\",\n      iconColor: \"text-blue-600\"\n    },\n    {\n      title: \"Active Users\",\n      value: stats?.activeUsers?.toLocaleString() || \"45,231\",\n      change: \"+8.3% from last month\",\n      changeType: \"positive\",\n      icon: Users,\n      bgColor: \"bg-green-100\",\n      iconColor: \"text-green-600\"\n    },\n    {\n      title: \"Search QPS\",\n      value: stats?.searchQps?.toLocaleString() || \"2,847\",\n      change: \"Peak: 4,521\",\n      changeType: \"neutral\",\n      icon: Search,\n      bgColor: \"bg-orange-100\",\n      iconColor: \"text-orange-600\"\n    },\n    {\n      title: \"Pending Review\",\n      value: stats?.pendingReview?.toLocaleString() || \"17\",\n      change: \"Requires attention\",\n      changeType: \"negative\",\n      icon: AlertTriangle,\n      bgColor: \"bg-red-100\",\n      iconColor: \"text-red-600\"\n    }\n  ];\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n      {statsCards.map((stat) => {\n        const Icon = stat.icon;\n        \n        return (\n          <Card key={stat.title} className=\"bg-white\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-gray-600\">{stat.title}</p>\n                  <p \n                    className=\"text-2xl font-semibold text-gray-900\"\n                    data-testid={`stat-${stat.title.toLowerCase().replace(/\\s+/g, '-')}`}\n                  >\n                    {stat.value}\n                  </p>\n                  <p className={`text-xs mt-1 ${\n                    stat.changeType === \"positive\" \n                      ? \"text-green-600\" \n                      : stat.changeType === \"negative\" \n                      ? \"text-red-600\" \n                      : \"text-orange-600\"\n                  }`}>\n                    {stat.change}\n                  </p>\n                </div>\n                <div className={`w-12 h-12 ${stat.bgColor} rounded-lg flex items-center justify-center`}>\n                  <Icon className={`${stat.iconColor} text-xl`} />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        );\n      })}\n    </div>\n  );\n}\n","size_bytes":2670},"client/src/components/admin/ModerationQueue.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Check, X, Clock, Utensils, Leaf, Dumbbell } from \"lucide-react\";\nimport { formatDistanceToNow } from \"date-fns\";\n\ninterface ModerationQueueProps {\n  reports: any[];\n  loading: boolean;\n}\n\nexport function ModerationQueue({ reports, loading }: ModerationQueueProps) {\n  const handleApprove = async (id: string) => {\n    try {\n      const response = await fetch(`/api/v1/admin/user-recipes/${id}/approve`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          reviewNotes: \"Approved via admin dashboard\"\n        })\n      });\n      \n      if (response.ok) {\n        // Refresh the data\n        window.location.reload();\n      }\n    } catch (error) {\n      console.error(\"Failed to approve content:\", error);\n    }\n  };\n\n  const handleReject = async (id: string) => {\n    try {\n      const response = await fetch(`/api/v1/admin/user-recipes/${id}/reject`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          reviewNotes: \"Rejected - does not meet quality standards\"\n        })\n      });\n      \n      if (response.ok) {\n        // Refresh the data\n        window.location.reload();\n      }\n    } catch (error) {\n      console.error(\"Failed to reject content:\", error);\n    }\n  };\n\n  if (loading) {\n    return (\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"animate-pulse space-y-4\">\n            <div className=\"h-4 bg-gray-200 rounded w-1/3\"></div>\n            <div className=\"space-y-3\">\n              {[...Array(3)].map((_, i) => (\n                <div key={i} className=\"border rounded-lg p-4\">\n                  <div className=\"h-4 bg-gray-200 rounded w-3/4 mb-2\"></div>\n                  <div className=\"h-3 bg-gray-200 rounded w-1/2\"></div>\n                </div>\n              ))}\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  // For demo purposes, showing some sample moderation items\n  // In real implementation, this would come from the reports prop\n  const moderationItems = [\n    {\n      id: \"1\",\n      title: \"Homemade Pizza Recipe\",\n      author: \"user@example.com\",\n      submitted: new Date(Date.now() - 2 * 60 * 60 * 1000), // 2 hours ago\n      totalTimeMinutes: 30,\n      cuisines: [\"Italian\"],\n      dietTags: [\"Vegetarian\"]\n    },\n    {\n      id: \"2\", \n      title: \"Vegan Smoothie Bowl\",\n      author: \"healthyfoodie@example.com\",\n      submitted: new Date(Date.now() - 4 * 60 * 60 * 1000), // 4 hours ago\n      totalTimeMinutes: 10,\n      cuisines: [],\n      dietTags: [\"Vegan\"]\n    }\n  ];\n\n  return (\n    <Card>\n      <CardHeader className=\"border-b border-gray-200\">\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"text-lg font-semibold text-gray-900\">\n            Content Moderation\n          </CardTitle>\n          <Badge \n            variant=\"destructive\"\n            className=\"bg-red-500 text-white\"\n          >\n            {moderationItems.length} pending\n          </Badge>\n        </div>\n      </CardHeader>\n      <CardContent className=\"p-6\">\n        <div className=\"space-y-4\">\n          {moderationItems.length === 0 ? (\n            <div className=\"text-center py-8 text-gray-500\">\n              No content pending moderation\n            </div>\n          ) : (\n            moderationItems.map((item) => (\n              <div\n                key={item.id}\n                className=\"border border-gray-200 rounded-lg p-4 hover:bg-gray-50\"\n                data-testid={`moderation-item-${item.id}`}\n              >\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex-1\">\n                    <h4 className=\"text-sm font-medium text-gray-900\">{item.title}</h4>\n                    <p className=\"text-xs text-gray-500 mt-1\">by {item.author}</p>\n                    <p className=\"text-xs text-gray-500\">\n                      Submitted {formatDistanceToNow(item.submitted)} ago\n                    </p>\n                  </div>\n                  <div className=\"flex space-x-2 ml-4\">\n                    <Button\n                      size=\"sm\"\n                      variant=\"ghost\"\n                      className=\"text-green-600 hover:text-green-700 hover:bg-green-50\"\n                      onClick={() => handleApprove(item.id)}\n                      data-testid={`approve-content-${item.id}`}\n                    >\n                      <Check className=\"w-4 h-4\" />\n                    </Button>\n                    <Button\n                      size=\"sm\"\n                      variant=\"ghost\"\n                      className=\"text-red-600 hover:text-red-700 hover:bg-red-50\"\n                      onClick={() => handleReject(item.id)}\n                      data-testid={`reject-content-${item.id}`}\n                    >\n                      <X className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                </div>\n                <div className=\"mt-3 flex items-center space-x-4 text-xs text-gray-500\">\n                  <span className=\"flex items-center\">\n                    <Clock className=\"w-3 h-3 mr-1\" />\n                    {item.totalTimeMinutes} min cook time\n                  </span>\n                  {item.cuisines.length > 0 && (\n                    <span className=\"flex items-center\">\n                      <Utensils className=\"w-3 h-3 mr-1\" />\n                      {item.cuisines[0]} cuisine\n                    </span>\n                  )}\n                  {item.dietTags.includes(\"Vegetarian\") && (\n                    <span className=\"flex items-center\">\n                      <Leaf className=\"w-3 h-3 mr-1\" />\n                      Vegetarian\n                    </span>\n                  )}\n                  {item.dietTags.includes(\"Vegan\") && (\n                    <span className=\"flex items-center\">\n                      <Leaf className=\"w-3 h-3 mr-1\" />\n                      Vegan\n                    </span>\n                  )}\n                  {item.dietTags.includes(\"High Protein\") && (\n                    <span className=\"flex items-center\">\n                      <Dumbbell className=\"w-3 h-3 mr-1\" />\n                      High protein\n                    </span>\n                  )}\n                </div>\n              </div>\n            ))\n          )}\n          \n          <div className=\"mt-6\">\n            <Button\n              variant=\"outline\"\n              className=\"w-full text-blue-600 hover:text-blue-700 hover:bg-blue-50 border-blue-600\"\n              data-testid=\"view-all-pending-content-button\"\n            >\n              View All Pending Content\n            </Button>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":6998},"client/src/components/admin/Sidebar.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { \n  LayoutDashboard,\n  BookOpen,\n  Users,\n  MessageSquare,\n  Search,\n  TrendingUp,\n  History,\n  Database,\n  Shield,\n  ShieldQuestion,\n  Gauge,\n  Utensils,\n  LogOut\n} from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface NavItem {\n  name: string;\n  href: string;\n  icon: any;\n  badge?: string;\n  badgeVariant?: \"default\" | \"destructive\" | \"outline\" | \"secondary\";\n}\n\ninterface NavSection {\n  title: string;\n  items: NavItem[];\n}\n\nconst navSections: NavSection[] = [\n  {\n    title: \"Content Management\",\n    items: [\n      { name: \"Recipes\", href: \"/admin/recipes\", icon: BookOpen, badge: \"12\", badgeVariant: \"secondary\" as const },\n      { name: \"Users\", href: \"/admin/users\", icon: Users },\n      { name: \"User Content\", href: \"/admin/user-content\", icon: MessageSquare, badge: \"5\", badgeVariant: \"destructive\" as const },\n    ]\n  },\n  {\n    title: \"System\",\n    items: [\n      { name: \"Search Analytics\", href: \"/admin/search\", icon: Search },\n      { name: \"Performance\", href: \"/admin/performance\", icon: TrendingUp },\n      { name: \"Audit Logs\", href: \"/admin/audit\", icon: History },\n      { name: \"Database\", href: \"/admin/database\", icon: Database },\n    ]\n  },\n  {\n    title: \"Security\",\n    items: [\n      { name: \"Authentication\", href: \"/admin/auth\", icon: Shield },\n      { name: \"Admin Teams\", href: \"/admin/teams\", icon: ShieldQuestion },\n      { name: \"Rate Limits\", href: \"/admin/rate-limits\", icon: Gauge },\n    ]\n  }\n];\n\nexport function Sidebar() {\n  const [location] = useLocation();\n\n  return (\n    <aside className=\"w-64 bg-white shadow-sm border-r border-gray-200 flex flex-col\">\n      <div className=\"p-6 border-b border-gray-200\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"w-10 h-10 bg-blue-600 rounded-lg flex items-center justify-center\">\n            <Utensils className=\"text-white text-lg\" />\n          </div>\n          <div>\n            <h1 className=\"text-lg font-semibold text-gray-900\">Nutrition Admin</h1>\n            <p className=\"text-xs text-gray-500\">Production Backend</p>\n          </div>\n        </div>\n      </div>\n      \n      <nav className=\"flex-1 p-4 space-y-2 scrollbar-thin overflow-y-auto\">\n        <Link \n          href=\"/admin\"\n          className={cn(\n            \"flex items-center space-x-3 px-3 py-2 rounded-lg font-medium\",\n            location === \"/admin\" || location === \"/admin/\"\n              ? \"bg-blue-50 text-blue-600\"\n              : \"text-gray-700 hover:bg-gray-100\"\n          )}\n          data-testid=\"nav-dashboard\"\n        >\n          <LayoutDashboard className=\"w-5 h-5\" />\n          <span>Dashboard</span>\n        </Link>\n        \n        {navSections.map((section) => (\n          <div key={section.title} className=\"space-y-1\">\n            <h3 className=\"text-xs font-semibold text-gray-400 uppercase tracking-wider px-3 py-2\">\n              {section.title}\n            </h3>\n            {section.items.map((item) => {\n              const Icon = item.icon;\n              const isActive = location === item.href;\n              \n              return (\n                <Link \n                  key={item.name} \n                  href={item.href}\n                  className={cn(\n                    \"flex items-center space-x-3 px-3 py-2 rounded-lg\",\n                    isActive\n                      ? \"bg-blue-50 text-blue-600\"\n                      : \"text-gray-700 hover:bg-gray-100\"\n                  )}\n                  data-testid={`nav-${item.name.toLowerCase().replace(/\\s+/g, '-')}`}\n                >\n                  <Icon className=\"w-5 h-5\" />\n                  <span>{item.name}</span>\n                  {item.badge && (\n                    <Badge \n                      variant={item.badgeVariant || \"default\"}\n                      className=\"ml-auto\"\n                    >\n                      {item.badge}\n                    </Badge>\n                  )}\n                </Link>\n              );\n            })}\n          </div>\n        ))}\n      </nav>\n      \n      <div className=\"p-4 border-t border-gray-200\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"w-8 h-8 bg-gray-300 rounded-full flex items-center justify-center\">\n            <Users className=\"text-gray-600 text-sm\" />\n          </div>\n          <div className=\"flex-1 min-w-0\">\n            <p className=\"text-sm font-medium text-gray-900 truncate\">Admin User</p>\n            <p className=\"text-xs text-gray-500\">Super Admin</p>\n          </div>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            className=\"text-gray-400 hover:text-gray-600\"\n            data-testid=\"logout-button\"\n          >\n            <LogOut className=\"w-4 h-4\" />\n          </Button>\n        </div>\n      </div>\n    </aside>\n  );\n}\n","size_bytes":4958},"client/src/components/admin/TopBar.tsx":{"content":"import { useState } from \"react\";\nimport { ChevronRight, UserCheck2 } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\n\nexport function TopBar() {\n  const [impersonateUserId, setImpersonateUserId] = useState(\"\");\n\n  const handleImpersonation = () => {\n    if (impersonateUserId.trim()) {\n      // TODO: Set X-Act-As-User header for subsequent requests\n      console.log(\"Impersonating user:\", impersonateUserId);\n      // In a real implementation, this would set a global header or context\n    }\n  };\n\n  return (\n    <header className=\"bg-white border-b border-gray-200 px-6 py-4\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <nav className=\"flex items-center space-x-2 text-sm\">\n            <a href=\"/admin\" className=\"text-gray-500 hover:text-gray-700\" data-testid=\"breadcrumb-admin\">\n              Admin\n            </a>\n            <ChevronRight className=\"text-gray-400 text-xs\" />\n            <span className=\"text-gray-900 font-medium\">Dashboard</span>\n          </nav>\n          <h2 className=\"text-2xl font-semibold text-gray-900 mt-1\">System Overview</h2>\n        </div>\n        \n        <div className=\"flex items-center space-x-4\">\n          {/* Impersonation Controls */}\n          <div className=\"flex items-center space-x-2 bg-yellow-50 border border-yellow-200 rounded-lg px-3 py-2\">\n            <UserCheck2 className=\"text-yellow-600 w-4 h-4\" />\n            <span className=\"text-sm text-yellow-800\">Act as User</span>\n            <Input\n              type=\"text\"\n              placeholder=\"User ID\"\n              value={impersonateUserId}\n              onChange={(e) => setImpersonateUserId(e.target.value)}\n              className=\"bg-white border border-yellow-300 rounded px-2 py-1 text-sm w-24 h-8\"\n              data-testid=\"impersonate-user-input\"\n            />\n            <Button\n              size=\"sm\"\n              className=\"bg-yellow-600 text-white px-3 py-1 rounded text-sm hover:bg-yellow-700\"\n              onClick={handleImpersonation}\n              data-testid=\"impersonate-user-button\"\n            >\n              Apply\n            </Button>\n          </div>\n          \n          <div className=\"flex items-center space-x-2\">\n            <div className=\"w-2 h-2 bg-green-500 rounded-full\" />\n            <span className=\"text-sm text-gray-600\">System Healthy</span>\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":2523},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/admin-audit.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Sidebar } from \"@/components/admin/Sidebar\";\nimport { TopBar } from \"@/components/admin/TopBar\";\nimport { AuditLogTable } from \"@/components/admin/AuditLogTable\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Button } from \"@/components/ui/button\";\nimport { Search, Download, Filter } from \"lucide-react\";\n\nexport default function AdminAudit() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [actionFilter, setActionFilter] = useState(\"all\");\n  const [limit, setLimit] = useState(100);\n\n  const { data: auditLogs, isLoading: auditLoading, refetch } = useQuery({\n    queryKey: [\"/api/v1/admin/audit\", { limit, action: actionFilter !== \"all\" ? actionFilter : undefined }],\n    refetchInterval: 30000, // Refresh every 30 seconds\n  });\n\n  const filteredLogs = Array.isArray(auditLogs) ? auditLogs.filter((log: any) => {\n    const matchesSearch = searchTerm === \"\" || \n      log.action.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      log.actorUserId.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      log.targetTable.toLowerCase().includes(searchTerm.toLowerCase());\n    return matchesSearch;\n  }) : [];\n\n  const uniqueActions = Array.isArray(auditLogs) ? \n    [...new Set(auditLogs.map((log: any) => log.action))] : [];\n\n  const handleExport = () => {\n    if (filteredLogs.length === 0) return;\n    \n    const csv = [\n      ['Timestamp', 'Actor', 'Action', 'Target Table', 'Target ID', 'Reason'].join(','),\n      ...filteredLogs.map((log: any) => [\n        log.at,\n        log.actorUserId,\n        log.action,\n        log.targetTable,\n        log.targetId,\n        log.reason || ''\n      ].join(','))\n    ].join('\\n');\n    \n    const blob = new Blob([csv], { type: 'text/csv' });\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `audit-logs-${new Date().toISOString().split('T')[0]}.csv`;\n    a.click();\n    window.URL.revokeObjectURL(url);\n  };\n\n  return (\n    <div className=\"min-h-screen flex bg-gray-50\">\n      <Sidebar />\n      \n      <main className=\"flex-1 flex flex-col min-w-0\">\n        <TopBar />\n        \n        <div className=\"flex-1 p-6 overflow-auto\">\n          <div className=\"mb-6\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <h1 className=\"text-2xl font-bold text-gray-900\">Audit Logs</h1>\n              <div className=\"flex items-center space-x-2\">\n                <Button variant=\"outline\" onClick={() => refetch()} data-testid=\"refresh-audit-logs\">\n                  <Filter className=\"w-4 h-4 mr-2\" />\n                  Refresh\n                </Button>\n                <Button variant=\"outline\" onClick={handleExport} data-testid=\"export-audit-logs\">\n                  <Download className=\"w-4 h-4 mr-2\" />\n                  Export CSV\n                </Button>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center space-x-4 mb-4\">\n              <div className=\"relative flex-1 max-w-md\">\n                <Search className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n                <Input\n                  placeholder=\"Search logs by action, user, or table...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10\"\n                  data-testid=\"search-audit-logs\"\n                />\n              </div>\n              \n              <Select value={actionFilter} onValueChange={setActionFilter}>\n                <SelectTrigger className=\"w-48\">\n                  <SelectValue placeholder=\"Filter by action\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Actions</SelectItem>\n                  {uniqueActions.map((action) => (\n                    <SelectItem key={action} value={action}>{action}</SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              \n              <Select value={limit.toString()} onValueChange={(value) => setLimit(parseInt(value))}>\n                <SelectTrigger className=\"w-32\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"50\">50 entries</SelectItem>\n                  <SelectItem value=\"100\">100 entries</SelectItem>\n                  <SelectItem value=\"250\">250 entries</SelectItem>\n                  <SelectItem value=\"500\">500 entries</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-6\">\n              <Card>\n                <CardContent className=\"p-4\">\n                  <div className=\"text-center\">\n                    <p className=\"text-sm text-gray-600\">Total Entries</p>\n                    <p className=\"text-2xl font-bold text-blue-600\">{Array.isArray(auditLogs) ? auditLogs.length : 0}</p>\n                  </div>\n                </CardContent>\n              </Card>\n              \n              <Card>\n                <CardContent className=\"p-4\">\n                  <div className=\"text-center\">\n                    <p className=\"text-sm text-gray-600\">Filtered Results</p>\n                    <p className=\"text-2xl font-bold text-green-600\">{filteredLogs.length}</p>\n                  </div>\n                </CardContent>\n              </Card>\n              \n              <Card>\n                <CardContent className=\"p-4\">\n                  <div className=\"text-center\">\n                    <p className=\"text-sm text-gray-600\">Unique Actions</p>\n                    <p className=\"text-2xl font-bold text-purple-600\">{uniqueActions.length}</p>\n                  </div>\n                </CardContent>\n              </Card>\n              \n              <Card>\n                <CardContent className=\"p-4\">\n                  <div className=\"text-center\">\n                    <p className=\"text-sm text-gray-600\">Today's Entries</p>\n                    <p className=\"text-2xl font-bold text-orange-600\">\n                      {Array.isArray(auditLogs) ? \n                        auditLogs.filter((log: any) => \n                          new Date(log.at).toDateString() === new Date().toDateString()\n                        ).length : 0\n                      }\n                    </p>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n\n          {/* Audit Log Table */}\n          <AuditLogTable logs={filteredLogs} loading={auditLoading} />\n        </div>\n      </main>\n    </div>\n  );\n}","size_bytes":6919},"client/src/pages/admin-recipes.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Sidebar } from \"@/components/admin/Sidebar\";\nimport { TopBar } from \"@/components/admin/TopBar\";\nimport { Plus, Search, Edit, Trash2, Clock, Users } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface Recipe {\n  id: string;\n  title: string;\n  description?: string;\n  calories?: number;\n  totalTimeMinutes?: number;\n  servings?: number;\n  status: string;\n  cuisines: string[];\n  dietTags: string[];\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport default function AdminRecipes() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const queryClient = useQueryClient();\n\n  const { data: recipes = [], isLoading } = useQuery({\n    queryKey: [\"/api/v1/recipes\"],\n    select: (data: Recipe[]) => data.filter(recipe => \n      recipe.title.toLowerCase().includes(searchTerm.toLowerCase())\n    )\n  });\n\n  const deleteRecipe = useMutation({\n    mutationFn: async (id: string) => {\n      return apiRequest(`/api/v1/admin/recipes/${id}`, {\n        method: \"DELETE\",\n        body: JSON.stringify({ reason: \"Deleted via admin interface\" })\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/v1/recipes\"] });\n    }\n  });\n\n  const getStatusBadge = (status: string) => {\n    const variants = {\n      published: \"bg-green-100 text-green-800\",\n      draft: \"bg-yellow-100 text-yellow-800\", \n      archived: \"bg-gray-100 text-gray-800\"\n    };\n    return variants[status as keyof typeof variants] || \"bg-gray-100 text-gray-800\";\n  };\n\n  return (\n    <div className=\"min-h-screen flex bg-gray-50\">\n      <Sidebar />\n      \n      <main className=\"flex-1 flex flex-col min-w-0\">\n        <TopBar />\n        \n        <div className=\"flex-1 p-6 overflow-auto\">\n          <div className=\"mb-6\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <h1 className=\"text-2xl font-bold text-gray-900\">Recipe Management</h1>\n              <Button className=\"bg-blue-600 hover:bg-blue-700\" data-testid=\"add-recipe-button\">\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Add Recipe\n              </Button>\n            </div>\n            \n            <div className=\"flex items-center space-x-4\">\n              <div className=\"relative flex-1 max-w-md\">\n                <Search className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n                <Input\n                  placeholder=\"Search recipes...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10\"\n                  data-testid=\"search-recipes-input\"\n                />\n              </div>\n            </div>\n          </div>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>All Recipes ({recipes.length})</CardTitle>\n            </CardHeader>\n            <CardContent className=\"p-0\">\n              {isLoading ? (\n                <div className=\"p-6\">\n                  <div className=\"animate-pulse space-y-4\">\n                    {[...Array(5)].map((_, i) => (\n                      <div key={i} className=\"flex items-center space-x-4 p-4 border rounded\">\n                        <div className=\"h-16 w-16 bg-gray-200 rounded\"></div>\n                        <div className=\"flex-1 space-y-2\">\n                          <div className=\"h-4 bg-gray-200 rounded w-1/3\"></div>\n                          <div className=\"h-3 bg-gray-200 rounded w-2/3\"></div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              ) : recipes.length === 0 ? (\n                <div className=\"p-12 text-center\">\n                  <p className=\"text-gray-500\">No recipes found matching your search.</p>\n                </div>\n              ) : (\n                <div className=\"divide-y divide-gray-200\">\n                  {recipes.map((recipe) => (\n                    <div key={recipe.id} className=\"p-6 hover:bg-gray-50\" data-testid={`recipe-row-${recipe.id}`}>\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center space-x-3 mb-2\">\n                            <h3 className=\"text-lg font-medium text-gray-900\">{recipe.title}</h3>\n                            <Badge className={getStatusBadge(recipe.status)}>\n                              {recipe.status}\n                            </Badge>\n                          </div>\n                          \n                          <p className=\"text-gray-600 mb-3\">{recipe.description || \"No description\"}</p>\n                          \n                          <div className=\"flex items-center space-x-6 text-sm text-gray-500\">\n                            {recipe.calories && (\n                              <span>{recipe.calories} cal</span>\n                            )}\n                            {recipe.totalTimeMinutes && (\n                              <span className=\"flex items-center\">\n                                <Clock className=\"w-4 h-4 mr-1\" />\n                                {recipe.totalTimeMinutes}m\n                              </span>\n                            )}\n                            {recipe.servings && (\n                              <span className=\"flex items-center\">\n                                <Users className=\"w-4 h-4 mr-1\" />\n                                {recipe.servings} servings\n                              </span>\n                            )}\n                          </div>\n                          \n                          <div className=\"flex items-center space-x-2 mt-2\">\n                            {recipe.cuisines.map((cuisine) => (\n                              <Badge key={cuisine} variant=\"outline\" className=\"text-xs\">\n                                {cuisine}\n                              </Badge>\n                            ))}\n                            {recipe.dietTags.map((tag) => (\n                              <Badge key={tag} variant=\"secondary\" className=\"text-xs\">\n                                {tag}\n                              </Badge>\n                            ))}\n                          </div>\n                        </div>\n                        \n                        <div className=\"flex items-center space-x-2 ml-4\">\n                          <Button variant=\"outline\" size=\"sm\" data-testid={`edit-recipe-${recipe.id}`}>\n                            <Edit className=\"w-4 h-4\" />\n                          </Button>\n                          <Button \n                            variant=\"outline\" \n                            size=\"sm\" \n                            onClick={() => deleteRecipe.mutate(recipe.id)}\n                            disabled={deleteRecipe.isPending}\n                            data-testid={`delete-recipe-${recipe.id}`}\n                          >\n                            <Trash2 className=\"w-4 h-4\" />\n                          </Button>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </main>\n    </div>\n  );\n}","size_bytes":7582},"client/src/pages/admin-user-content.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Sidebar } from \"@/components/admin/Sidebar\";\nimport { TopBar } from \"@/components/admin/TopBar\";\nimport { ModerationQueue } from \"@/components/admin/ModerationQueue\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { MessageSquare, Clock, CheckCircle, XCircle } from \"lucide-react\";\n\nexport default function AdminUserContent() {\n  const { data: reports, isLoading: reportsLoading } = useQuery({\n    queryKey: [\"/api/v1/admin/reports\"],\n    refetchInterval: 30000, // Refresh every 30 seconds\n  });\n\n  const { data: userRecipes, isLoading: recipesLoading } = useQuery({\n    queryKey: [\"/api/v1/user-recipes\"],\n  });\n\n  const pendingCount = Array.isArray(userRecipes) ? userRecipes.filter((r: any) => r.reviewStatus === 'pending').length : 0;\n  const approvedCount = Array.isArray(userRecipes) ? userRecipes.filter((r: any) => r.reviewStatus === 'approved').length : 0;\n  const rejectedCount = Array.isArray(userRecipes) ? userRecipes.filter((r: any) => r.reviewStatus === 'rejected').length : 0;\n\n  return (\n    <div className=\"min-h-screen flex bg-gray-50\">\n      <Sidebar />\n      \n      <main className=\"flex-1 flex flex-col min-w-0\">\n        <TopBar />\n        \n        <div className=\"flex-1 p-6 overflow-auto\">\n          <div className=\"mb-6\">\n            <h1 className=\"text-2xl font-bold text-gray-900 mb-4\">User Content Moderation</h1>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-6\">\n              <Card>\n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm text-gray-600\">Pending Review</p>\n                      <p className=\"text-2xl font-bold text-orange-600\">{pendingCount}</p>\n                    </div>\n                    <Clock className=\"w-8 h-8 text-orange-500\" />\n                  </div>\n                </CardContent>\n              </Card>\n              \n              <Card>\n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm text-gray-600\">Approved</p>\n                      <p className=\"text-2xl font-bold text-green-600\">{approvedCount}</p>\n                    </div>\n                    <CheckCircle className=\"w-8 h-8 text-green-500\" />\n                  </div>\n                </CardContent>\n              </Card>\n              \n              <Card>\n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm text-gray-600\">Rejected</p>\n                      <p className=\"text-2xl font-bold text-red-600\">{rejectedCount}</p>\n                    </div>\n                    <XCircle className=\"w-8 h-8 text-red-500\" />\n                  </div>\n                </CardContent>\n              </Card>\n              \n              <Card>\n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm text-gray-600\">Open Reports</p>\n                      <p className=\"text-2xl font-bold text-blue-600\">{Array.isArray(reports) ? reports.length : 0}</p>\n                    </div>\n                    <MessageSquare className=\"w-8 h-8 text-blue-500\" />\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n\n          {/* Content Moderation Queue */}\n          <ModerationQueue reports={reports || []} loading={reportsLoading} />\n          \n          {/* Recent User Recipes */}\n          <Card className=\"mt-6\">\n            <CardHeader>\n              <CardTitle>Recent User Submissions</CardTitle>\n            </CardHeader>\n            <CardContent>\n              {recipesLoading ? (\n                <div className=\"animate-pulse space-y-4\">\n                  {[...Array(3)].map((_, i) => (\n                    <div key={i} className=\"flex items-center space-x-4 p-4 border rounded\">\n                      <div className=\"h-12 w-12 bg-gray-200 rounded\"></div>\n                      <div className=\"flex-1 space-y-2\">\n                        <div className=\"h-4 bg-gray-200 rounded w-1/3\"></div>\n                        <div className=\"h-3 bg-gray-200 rounded w-2/3\"></div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              ) : Array.isArray(userRecipes) && userRecipes.length > 0 ? (\n                <div className=\"space-y-4\">\n                  {userRecipes.slice(0, 5).map((recipe: any) => (\n                    <div key={recipe.id} className=\"flex items-center justify-between p-4 border rounded-lg\" data-testid={`user-recipe-${recipe.id}`}>\n                      <div>\n                        <h4 className=\"font-medium\">{recipe.title}</h4>\n                        <p className=\"text-sm text-gray-600\">by {recipe.ownerUserId}</p>\n                        <p className=\"text-xs text-gray-500\">Submitted {new Date(recipe.createdAt).toLocaleDateString()}</p>\n                      </div>\n                      <Badge className={{\n                        pending: \"bg-orange-100 text-orange-800\",\n                        approved: \"bg-green-100 text-green-800\", \n                        rejected: \"bg-red-100 text-red-800\"\n                      }[recipe.reviewStatus] || \"bg-gray-100 text-gray-800\"}>\n                        {recipe.reviewStatus}\n                      </Badge>\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                <p className=\"text-gray-500 text-center py-8\">No user recipes found.</p>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </main>\n    </div>\n  );\n}","size_bytes":6017}}}